// Generated by Haxe 3.4.7
(function ($hx_exports, $global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Argan = function() { };
$hxClasses["Argan"] = Argan;
Argan.__name__ = true;
Argan.start = function(config) {
	if(null != config) {
		var args_set = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = Reflect.fields(config);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var value = Reflect.field(config,f);
			if(__map_reserved[f] != null) {
				args_set.setReserved(f,value);
			} else {
				args_set.h[f] = value;
			}
		}
		Argan.args = args_set;
	}
};
Argan.objectFromMap = function(map) {
	var obj = { };
	var k = map.keys();
	while(k.hasNext()) {
		var k1 = k.next();
		obj[k1] = __map_reserved[k1] != null ? map.getReserved(k1) : map.h[k1];
	}
	return obj;
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = true;
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = true;
List.prototype = {
	add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new _$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["_List.ListNode"] = _$List_ListNode;
_$List_ListNode.__name__ = true;
_$List_ListNode.prototype = {
	__class__: _$List_ListNode
};
var Main = $hx_exports["uapi"] = function() { };
$hxClasses["Main"] = Main;
Main.__name__ = true;
Main.main = function() {
};
Main.getPlayers = function() {
	var players = { };
	var resources = haxe_Resource.listNames();
	resources.push("native");
	var _g = 0;
	while(_g < resources.length) {
		var n = resources[_g];
		++_g;
		if(n.indexOf("logo") == -1 && n.indexOf("template") == -1 && n != Argan.HELP_RESOURCE_KEY && !StringTools.endsWith(n,"-src") && !StringTools.endsWith(n,"-argan")) {
			players[n] = JSON.parse(haxe_Resource.getString(n + "-argan"));
		}
	}
	return players;
};
Main.getHelp = function() {
	return Argan.objectFromMap(haxe_Unserializer.run(haxe_Resource.getString("_help_map")));
};
Main.getPlayerVersions = function(player) {
	return JSON.parse(haxe_Resource.getString("" + player + "-src"));
};
Main.addPlayerSrc = function(player,urls) {
	urls = urls.map(function(url) {
		return Main.absUrl(url);
	});
	var _this = Main.playerSrcExtended;
	if(__map_reserved[player] != null) {
		_this.setReserved(player,urls);
	} else {
		_this.h[player] = urls;
	}
};
Main.overridePlayerSrcs = function(player_srcs_object) {
	Main.playerSrcOverride = player_srcs_object;
};
Main.writePlayer = function(parent,uri,player_version_string,player_config,inject_head,inject_body) {
	if(player_version_string == null) {
		player_version_string = "dashjs";
	}
	Argan.start(player_config);
	var iframe = window.document.createElement("iframe");
	iframe.src = "about:blank";
	iframe.setAttribute("importance","high");
	iframe.setAttribute("border","0");
	iframe.setAttribute("allowfullscreen","true");
	iframe.setAttribute("seamless","true");
	iframe.setAttribute("frameborder","0");
	var meta = player_version_string.split(":");
	var player = meta[0];
	if(haxe_Resource.listNames().indexOf(player) == -1 && player != "native") {
		throw new js__$Boot_HaxeError("unknown player \"" + player + "\", please select any of " + Std.string(haxe_Resource.listNames()) + ".");
	}
	var playerBody = haxe_Resource.getString("" + player);
	if(playerBody != null && Object.prototype.hasOwnProperty.call(window,"Blob")) {
		var split = playerBody.split(",");
		playerBody = URL.createObjectURL(new Blob([haxe_crypto_Base64.decode(split[1]).b.bufferValue],{ type : split[0].split(";")[0]}));
	}
	var version = meta[1];
	var head = [];
	var body = ["<script src=\"" + playerBody + "\"></script>"];
	var error = null;
	var last_src = "#";
	if(player == "native") {
		body = ["<script>video.src = uri;</script>"];
	} else {
		var _this = Main.playerSrcExtended;
		if(__map_reserved[player_version_string] != null ? _this.existsReserved(player_version_string) : _this.h.hasOwnProperty(player_version_string)) {
			var _g = 0;
			var _this1 = Main.playerSrcExtended;
			var _g1 = __map_reserved[player_version_string] != null ? _this1.getReserved(player_version_string) : _this1.h[player_version_string];
			while(_g < _g1.length) {
				var src = _g1[_g];
				++_g;
				last_src = src;
				head.push("<script crossorigin src=\"" + last_src + "\"></script>");
			}
		} else {
			var srcs = Main.playerSrcOverride == null ? JSON.parse(haxe_Resource.getString("" + player + "-src")) : Main.playerSrcOverride;
			var _g2 = 0;
			var _g11 = version == null ? Reflect.fields(srcs) : [version];
			while(_g2 < _g11.length) {
				var s = _g11[_g2];
				++_g2;
				version = s;
				if(Object.prototype.hasOwnProperty.call(srcs,s)) {
					var list = Reflect.field(srcs,s);
					var _g21 = 0;
					while(_g21 < list.length) {
						var src1 = list[_g21];
						++_g21;
						last_src = src1;
						head.push("<script crossorigin src=\"" + last_src + "\"></script>");
					}
				} else {
					error = "unknown version:" + version + " for \"" + player + "\"";
				}
				break;
			}
		}
	}
	if(null != inject_head) {
		head.push(inject_head);
	}
	if(null != inject_body) {
		body.push(inject_body);
	}
	var html = new haxe_Template(haxe_Resource.getString("template"));
	var html1 = encodeURIComponent(uri);
	var html2 = haxe_Resource.getString("logo");
	var _;
	var _1;
	if(Argan.args != null) {
		var _this2 = Argan.args;
		if(__map_reserved["autoplay"] != null) {
			_1 = _this2.existsReserved("autoplay");
		} else {
			_1 = _this2.h.hasOwnProperty("autoplay");
		}
	} else {
		_1 = false;
	}
	if(_1) {
		var _this3 = Argan.args;
		if(__map_reserved["autoplay"] != null) {
			_ = _this3.getReserved("autoplay");
		} else {
			_ = _this3.h["autoplay"];
		}
	} else {
		_ = true;
	}
	var _2;
	var _3;
	if(Argan.args != null) {
		var _this4 = Argan.args;
		if(__map_reserved["muted"] != null) {
			_3 = _this4.existsReserved("muted");
		} else {
			_3 = _this4.h.hasOwnProperty("muted");
		}
	} else {
		_3 = false;
	}
	if(_3) {
		var _this5 = Argan.args;
		if(__map_reserved["muted"] != null) {
			_2 = _this5.getReserved("muted");
		} else {
			_2 = _this5.h["muted"];
		}
	} else {
		_2 = false;
	}
	var _4;
	var _5;
	if(Argan.args != null) {
		var _this6 = Argan.args;
		if(__map_reserved["controls"] != null) {
			_5 = _this6.existsReserved("controls");
		} else {
			_5 = _this6.h.hasOwnProperty("controls");
		}
	} else {
		_5 = false;
	}
	if(_5) {
		var _this7 = Argan.args;
		if(__map_reserved["controls"] != null) {
			_4 = _this7.getReserved("controls");
		} else {
			_4 = _this7.h["controls"];
		}
	} else {
		_4 = true;
	}
	var _6;
	var _7;
	if(Argan.args != null) {
		var _this8 = Argan.args;
		if(__map_reserved["playsinline"] != null) {
			_7 = _this8.existsReserved("playsinline");
		} else {
			_7 = _this8.h.hasOwnProperty("playsinline");
		}
	} else {
		_7 = false;
	}
	if(_7) {
		var _this9 = Argan.args;
		if(__map_reserved["playsinline"] != null) {
			_6 = _this9.getReserved("playsinline");
		} else {
			_6 = _this9.h["playsinline"];
		}
	} else {
		_6 = true;
	}
	var html3 = head.join("\n");
	var html4 = body.join("\n");
	var html5 = error != null ? "<pre>uapi error:\n" + error + "</pre>" : haxe_Resource.getString("controls_template");
	var html6 = html.execute({ uri : html1, loading : html2, title : player, title_version : version, title_href : last_src, attr_autoplay : _, attr_muted : _2, attr_controls : _4, attr_playsinline : _6, head : html3, body : html4, controls : html5},{ poster : function(resolve) {
		var canvasDataURL = player.toUpperCase();
		var canvasDataURL1 = Main.generatePosterImage(uri,canvasDataURL);
		var split1 = canvasDataURL1.split(",");
		var retval = Object.prototype.hasOwnProperty.call(window,"Blob") ? URL.createObjectURL(new Blob([haxe_crypto_Base64.decode(split1[1]).b.bufferValue],{ type : split1[0].split(";")[0]})) : canvasDataURL1;
		return "poster=\"" + retval + "\"";
	}});
	var container = window.document.createElement("div");
	container.style.position = "relative";
	container.style.width = "100%";
	container.style.height = error != null ? "44px" : "0";
	container.style.boxSizing = "unset";
	iframe.id = iframe.name = "uapi.js/" + player + "(" + version + ")/" + Main.id++;
	iframe.style.position = "absolute";
	iframe.style.resize = "both";
	iframe.style.top = iframe.style.left = "0";
	iframe.style.width = iframe.style.height = "100%";
	container.appendChild(iframe);
	parent.appendChild(container);
	var retval1 = new Promise(function(resolve1,reject) {
		var iframe_loaded = false;
		var delayed_errors = [];
		iframe.addEventListener("load",function(event) {
			iframe_loaded = true;
			while(delayed_errors.length > 0) (delayed_errors.pop())();
			var hndl = null;
			var hndl1 = Reflect.field(iframe.contentWindow,"player");
			hndl = { reload : function(uri1,version1,config) {
				if(version1 == null) {
					version1 = player_version_string;
				}
				if(config == null) {
					config = player_config;
				}
				hndl.frame.parentElement.parentElement.removeChild(hndl.frame.parentElement);
				return Main.writePlayer(parent,uri1,version1,config,inject_head,inject_body)["catch"](function(e) {
					hndl.frame = e.target.frameElement;
					return hndl;
				}).then(function(nframe) {
					hndl = nframe;
					return nframe;
				});
			}, frame : iframe, player : hndl1, video : Reflect.field(iframe.contentWindow,"video")};
			resolve1(hndl);
		});
		var topWindow = window;
		var handleError = null;
		var messageCount = 0;
		handleError = function(error1,message,window,logToConsole) {
			if(logToConsole == null) {
				logToConsole = true;
			}
			var _8;
			var _9;
			if(Argan.args != null) {
				var _this10 = Argan.args;
				if(__map_reserved["quiet"] != null) {
					_9 = _this10.existsReserved("quiet");
				} else {
					_9 = _this10.h.hasOwnProperty("quiet");
				}
			} else {
				_9 = false;
			}
			if(_9) {
				var _this11 = Argan.args;
				if(__map_reserved["quiet"] != null) {
					_8 = _this11.getReserved("quiet");
				} else {
					_8 = _this11.h["quiet"];
				}
			} else {
				_8 = false;
			}
			if(_8) {
				return;
			}
			if(iframe_loaded) {
				var msg = window.document.createElement("div");
				msg.className = "message";
				message = StringTools.replace(message,"\\n","\n");
				msg.innerText += "💬 " + message + "\n";
				window.document.getElementById("error").appendChild(msg);
				if(logToConsole) {
					topWindow.console.error(error1);
				}
				var handleError1 = messageCount += 1;
				window.messagecount.innerText = "" + handleError1 + " message" + (messageCount > 1 ? "s" : "");
				window.resetControlsHeight();
				window.resetAspectRatio();
			} else {
				var f = handleError;
				var a1 = error1;
				var a2 = message;
				var a3 = window;
				var a4 = logToConsole;
				var handleError2 = function() {
					f(a1,a2,a3,a4);
				};
				delayed_errors.push(handleError2);
			}
		};
		var iframe1 = iframe;
		iframe1.hook = function(contentWindow) {
			contentWindow.config = Reflect.field(player_config,player);
			contentWindow.addEventListener("error",function(e1) {
				reject(e1);
				handleError(e1,"error.message:" + e1.message + ", " + e1.filename + ":" + e1.lineno,contentWindow);
			});
			contentWindow.onunhandledrejection = function(e2) {
				reject(e2);
				var retval2 = e2.reason.toString();
				handleError(e2,retval2,contentWindow);
			};
			uapi_Hooks.hookMethods(contentWindow.console,["error","warn"]).pipe(function(method,args) {
				handleError(args,"console." + method + ":\t" + Std.string(args),contentWindow,false);
			});
		};
		iframe1.hook_end = function(contentWindow1,video) {
			contentWindow1.messagecount.addEventListener("click",function(event1) {
				event1.target.parentElement.classList.toggle("folded");
				contentWindow1.resetControlsHeight();
				contentWindow1.resetAspectRatio();
			});
			video.addEventListener("error",function(e3) {
				window["lastError"] = video.error;
				var msg1;
				var _g3 = video.error.code;
				switch(_g3) {
				case 1:
					msg1 = "MEDIA_ERR_ABORTED";
					break;
				case 2:
					msg1 = "MEDIA_ERR_NETWORK";
					break;
				case 3:
					msg1 = "MEDIA_ERR_DECODE";
					break;
				case 4:
					msg1 = "MEDIA_ERR_SRC_NOT_SUPPORTED";
					break;
				case 5:
					msg1 = "MEDIA_ERR_ENCRYPTED";
					break;
				default:
					msg1 = "UNKNOWN";
				}
				if(Reflect.field(video.error,"message") != null) {
					msg1 += "\nMediaError.message: " + Std.string(Reflect.field(video.error,"message"));
				}
				var log = "HTMLMediaElement MediaError while playing\n" + uri + "\n\n" + msg1 + "\n\nsee\nhttps://developer.mozilla.org/en-US/docs/Web/API/MediaError for more details";
				handleError(e3,log,contentWindow1);
				if(player != "native" && !Object.prototype.hasOwnProperty.call(contentWindow1,"player")) {
					throw new js__$Boot_HaxeError("unable to load " + player_version_string);
				}
			});
		};
	});
	if(Object.prototype.hasOwnProperty.call(window,"Blob")) {
		iframe.setAttribute("sandbox","allow-scripts allow-same-origin");
		var tmp = haxe_io_Bytes.ofString(html6).b.bufferValue;
		iframe.src = URL.createObjectURL(new Blob([tmp],{ type : "text/html"}));
	} else {
		var tmp1 = "javascript:atob(\"" + haxe_crypto_Base64.encode(haxe_io_Bytes.ofString(html6));
		iframe.src = tmp1 + "\");";
	}
	return retval1;
};
Main.HashPipe = function(immediate) {
	return Main.HashPipeJs(immediate);
};
Main.HashPipeJs = function(immediate) {
	if(immediate == null) {
		immediate = false;
	}
	return { pipe : function(func) {
		var retval = uapi_Hooks.HashPipe(immediate).pipe(function(data) {
			var retval1 = Main.mapToDynamic(data.args);
			func({ args : retval1, values : data.values});
		});
		var _hx_func = retval.update;
		retval.update = function(args,values,rewrite,toggle) {
			var tmp = Main.dynamicToMap(args);
			_hx_func(tmp,values,rewrite,toggle);
		};
		return retval;
	}};
};
Main.KeyValueStringParser = function(location,QueryString) {
	return Main.KeyValueStringParserJs(location,QueryString);
};
Main.KeyValueStringParserJs = function(location,QueryString) {
	if(QueryString == null) {
		QueryString = true;
	}
	return Main.mapToDynamic(uapi_Utils.KeyValueStringParser(location,QueryString));
};
Main.Version = function() {
	return "1.0-73-gff55da4";
};
Main.write = function(str) {
	uapi_Utils.write(str);
};
Main.absUrl = function(url) {
	var abs = window.document.createElement("a");
	abs.href = url;
	return abs.href;
};
Main.dynamicToMap = function(object) {
	var retval = new haxe_ds_StringMap();
	var _g = 0;
	var _g1 = Reflect.fields(object);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		var value = Reflect.field(object,f);
		if(__map_reserved[f] != null) {
			retval.setReserved(f,value);
		} else {
			retval.h[f] = value;
		}
	}
	return retval;
};
Main.mapToDynamic = function(map) {
	var retval = { };
	var k = map.keys();
	while(k.hasNext()) {
		var k1 = k.next();
		retval[k1] = __map_reserved[k1] != null ? map.getReserved(k1) : map.h[k1];
	}
	return retval;
};
Main.generatePosterImage = function(uri,title) {
	var canvas = window.document.createElement("canvas");
	canvas.width = 720;
	canvas.height = 404;
	var ctx = canvas.getContext("2d");
	ctx.font = "bold 55pt sans-serif";
	ctx.fillStyle = "#333";
	ctx.textAlign = "center";
	ctx.fillText(title.toUpperCase(),360,200);
	ctx.font = "italic 12pt sans-serif";
	ctx.fillText(uri,360,250);
	return canvas.toDataURL();
};
Math.__name__ = true;
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = true;
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = true;
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return HxOverrides.substr(s,slen - elen,elen) == end;
	} else {
		return false;
	}
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = true;
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) {
		return null;
	}
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) {
		return null;
	}
	return e;
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = true;
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = true;
haxe_Resource.listNames = function() {
	var _g = [];
	var _g1 = 0;
	var _g2 = haxe_Resource.content;
	while(_g1 < _g2.length) {
		var x = _g2[_g1];
		++_g1;
		_g.push(x.name);
	}
	return _g;
};
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
var haxe__$Template_TemplateExpr = $hxClasses["haxe._Template.TemplateExpr"] = { __ename__ : true, __constructs__ : ["OpVar","OpExpr","OpIf","OpStr","OpBlock","OpForeach","OpMacro"] };
haxe__$Template_TemplateExpr.OpVar = function(v) { var $x = ["OpVar",0,v]; $x.__enum__ = haxe__$Template_TemplateExpr; $x.toString = $estr; return $x; };
haxe__$Template_TemplateExpr.OpExpr = function(expr) { var $x = ["OpExpr",1,expr]; $x.__enum__ = haxe__$Template_TemplateExpr; $x.toString = $estr; return $x; };
haxe__$Template_TemplateExpr.OpIf = function(expr,eif,eelse) { var $x = ["OpIf",2,expr,eif,eelse]; $x.__enum__ = haxe__$Template_TemplateExpr; $x.toString = $estr; return $x; };
haxe__$Template_TemplateExpr.OpStr = function(str) { var $x = ["OpStr",3,str]; $x.__enum__ = haxe__$Template_TemplateExpr; $x.toString = $estr; return $x; };
haxe__$Template_TemplateExpr.OpBlock = function(l) { var $x = ["OpBlock",4,l]; $x.__enum__ = haxe__$Template_TemplateExpr; $x.toString = $estr; return $x; };
haxe__$Template_TemplateExpr.OpForeach = function(expr,loop) { var $x = ["OpForeach",5,expr,loop]; $x.__enum__ = haxe__$Template_TemplateExpr; $x.toString = $estr; return $x; };
haxe__$Template_TemplateExpr.OpMacro = function(name,params) { var $x = ["OpMacro",6,name,params]; $x.__enum__ = haxe__$Template_TemplateExpr; $x.toString = $estr; return $x; };
var haxe_Template = function(str) {
	var tokens = this.parseTokens(str);
	this.expr = this.parseBlock(tokens);
	if(!tokens.isEmpty()) {
		throw new js__$Boot_HaxeError("Unexpected '" + Std.string(tokens.first().s) + "'");
	}
};
$hxClasses["haxe.Template"] = haxe_Template;
haxe_Template.__name__ = true;
haxe_Template.prototype = {
	execute: function(context,macros) {
		this.macros = macros == null ? { } : macros;
		this.context = context;
		this.stack = new List();
		this.buf = new StringBuf();
		this.run(this.expr);
		return this.buf.b;
	}
	,resolve: function(v) {
		if(v == "__current__") {
			return this.context;
		}
		var value = Reflect.getProperty(this.context,v);
		if(value != null || Object.prototype.hasOwnProperty.call(this.context,v)) {
			return value;
		}
		var _g_head = this.stack.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var ctx = val;
			value = Reflect.getProperty(ctx,v);
			if(value != null || Object.prototype.hasOwnProperty.call(ctx,v)) {
				return value;
			}
		}
		return Reflect.field(haxe_Template.globals,v);
	}
	,parseTokens: function(data) {
		var tokens = new List();
		while(haxe_Template.splitter.match(data)) {
			var p = haxe_Template.splitter.matchedPos();
			if(p.pos > 0) {
				tokens.add({ p : HxOverrides.substr(data,0,p.pos), s : true, l : null});
			}
			if(HxOverrides.cca(data,p.pos) == 58) {
				tokens.add({ p : HxOverrides.substr(data,p.pos + 2,p.len - 4), s : false, l : null});
				data = haxe_Template.splitter.matchedRight();
				continue;
			}
			var parp = p.pos + p.len;
			var npar = 1;
			var params = [];
			var part = "";
			while(true) {
				var c = HxOverrides.cca(data,parp);
				++parp;
				if(c == 40) {
					++npar;
				} else if(c == 41) {
					--npar;
					if(npar <= 0) {
						break;
					}
				} else if(c == null) {
					throw new js__$Boot_HaxeError("Unclosed macro parenthesis");
				}
				if(c == 44 && npar == 1) {
					params.push(part);
					part = "";
				} else {
					part += String.fromCharCode(c);
				}
			}
			params.push(part);
			tokens.add({ p : haxe_Template.splitter.matched(2), s : false, l : params});
			data = HxOverrides.substr(data,parp,data.length - parp);
		}
		if(data.length > 0) {
			tokens.add({ p : data, s : true, l : null});
		}
		return tokens;
	}
	,parseBlock: function(tokens) {
		var l = new List();
		while(true) {
			var t = tokens.first();
			if(t == null) {
				break;
			}
			if(!t.s && (t.p == "end" || t.p == "else" || HxOverrides.substr(t.p,0,7) == "elseif ")) {
				break;
			}
			l.add(this.parse(tokens));
		}
		if(l.length == 1) {
			return l.first();
		}
		return haxe__$Template_TemplateExpr.OpBlock(l);
	}
	,parse: function(tokens) {
		var t = tokens.pop();
		var p = t.p;
		if(t.s) {
			return haxe__$Template_TemplateExpr.OpStr(p);
		}
		if(t.l != null) {
			var pe = new List();
			var _g = 0;
			var _g1 = t.l;
			while(_g < _g1.length) {
				var p1 = _g1[_g];
				++_g;
				pe.add(this.parseBlock(this.parseTokens(p1)));
			}
			return haxe__$Template_TemplateExpr.OpMacro(p,pe);
		}
		if(HxOverrides.substr(p,0,3) == "if ") {
			p = HxOverrides.substr(p,3,p.length - 3);
			var e = this.parseExpr(p);
			var eif = this.parseBlock(tokens);
			var t1 = tokens.first();
			var eelse;
			if(t1 == null) {
				throw new js__$Boot_HaxeError("Unclosed 'if'");
			}
			if(t1.p == "end") {
				tokens.pop();
				eelse = null;
			} else if(t1.p == "else") {
				tokens.pop();
				eelse = this.parseBlock(tokens);
				t1 = tokens.pop();
				if(t1 == null || t1.p != "end") {
					throw new js__$Boot_HaxeError("Unclosed 'else'");
				}
			} else {
				t1.p = HxOverrides.substr(t1.p,4,t1.p.length - 4);
				eelse = this.parse(tokens);
			}
			return haxe__$Template_TemplateExpr.OpIf(e,eif,eelse);
		}
		if(HxOverrides.substr(p,0,8) == "foreach ") {
			p = HxOverrides.substr(p,8,p.length - 8);
			var e1 = this.parseExpr(p);
			var efor = this.parseBlock(tokens);
			var t2 = tokens.pop();
			if(t2 == null || t2.p != "end") {
				throw new js__$Boot_HaxeError("Unclosed 'foreach'");
			}
			return haxe__$Template_TemplateExpr.OpForeach(e1,efor);
		}
		if(haxe_Template.expr_splitter.match(p)) {
			return haxe__$Template_TemplateExpr.OpExpr(this.parseExpr(p));
		}
		return haxe__$Template_TemplateExpr.OpVar(p);
	}
	,parseExpr: function(data) {
		var l = new List();
		var expr = data;
		while(haxe_Template.expr_splitter.match(data)) {
			var p = haxe_Template.expr_splitter.matchedPos();
			var k = p.pos + p.len;
			if(p.pos != 0) {
				l.add({ p : HxOverrides.substr(data,0,p.pos), s : true});
			}
			var p1 = haxe_Template.expr_splitter.matched(0);
			l.add({ p : p1, s : p1.indexOf("\"") >= 0});
			data = haxe_Template.expr_splitter.matchedRight();
		}
		if(data.length != 0) {
			l.add({ p : data, s : true});
		}
		var e;
		try {
			e = this.makeExpr(l);
			if(!l.isEmpty()) {
				throw new js__$Boot_HaxeError(l.first().p);
			}
		} catch( s ) {
			if (s instanceof js__$Boot_HaxeError) s = s.val;
			if( js_Boot.__instanceof(s,String) ) {
				throw new js__$Boot_HaxeError("Unexpected '" + s + "' in " + expr);
			} else throw(s);
		}
		return function() {
			try {
				return e();
			} catch( exc ) {
				if (exc instanceof js__$Boot_HaxeError) exc = exc.val;
				throw new js__$Boot_HaxeError("Error : " + Std.string(exc) + " in " + expr);
			}
		};
	}
	,makeConst: function(v) {
		haxe_Template.expr_trim.match(v);
		v = haxe_Template.expr_trim.matched(1);
		if(HxOverrides.cca(v,0) == 34) {
			var str = HxOverrides.substr(v,1,v.length - 2);
			return function() {
				return str;
			};
		}
		if(haxe_Template.expr_int.match(v)) {
			var i = Std.parseInt(v);
			return function() {
				return i;
			};
		}
		if(haxe_Template.expr_float.match(v)) {
			var f = parseFloat(v);
			return function() {
				return f;
			};
		}
		var me = this;
		return function() {
			return me.resolve(v);
		};
	}
	,makePath: function(e,l) {
		var p = l.first();
		if(p == null || p.p != ".") {
			return e;
		}
		l.pop();
		var field = l.pop();
		if(field == null || !field.s) {
			throw new js__$Boot_HaxeError(field.p);
		}
		var f = field.p;
		haxe_Template.expr_trim.match(f);
		f = haxe_Template.expr_trim.matched(1);
		return this.makePath(function() {
			return Reflect.field(e(),f);
		},l);
	}
	,makeExpr: function(l) {
		return this.makePath(this.makeExpr2(l),l);
	}
	,makeExpr2: function(l) {
		var p = l.pop();
		if(p == null) {
			throw new js__$Boot_HaxeError("<eof>");
		}
		if(p.s) {
			return this.makeConst(p.p);
		}
		var _g = p.p;
		switch(_g) {
		case "!":
			var e = this.makeExpr(l);
			return function() {
				var v = e();
				if(v != null) {
					return v == false;
				} else {
					return true;
				}
			};
		case "(":
			var e1 = this.makeExpr(l);
			var p1 = l.pop();
			if(p1 == null || p1.s) {
				throw new js__$Boot_HaxeError(p1);
			}
			if(p1.p == ")") {
				return e1;
			}
			var e2 = this.makeExpr(l);
			var p2 = l.pop();
			if(p2 == null || p2.p != ")") {
				throw new js__$Boot_HaxeError(p2);
			}
			var _g1 = p1.p;
			switch(_g1) {
			case "!=":
				return function() {
					return e1() != e2();
				};
			case "&&":
				return function() {
					return e1() && e2();
				};
			case "*":
				return function() {
					return e1() * e2();
				};
			case "+":
				return function() {
					return e1() + e2();
				};
			case "-":
				return function() {
					return e1() - e2();
				};
			case "/":
				return function() {
					return e1() / e2();
				};
			case "<":
				return function() {
					return e1() < e2();
				};
			case "<=":
				return function() {
					return e1() <= e2();
				};
			case "==":
				return function() {
					return e1() == e2();
				};
			case ">":
				return function() {
					return e1() > e2();
				};
			case ">=":
				return function() {
					return e1() >= e2();
				};
			case "||":
				return function() {
					return e1() || e2();
				};
			default:
				throw new js__$Boot_HaxeError("Unknown operation " + p1.p);
			}
			break;
		case "-":
			var e3 = this.makeExpr(l);
			return function() {
				return -e3();
			};
		}
		throw new js__$Boot_HaxeError(p.p);
	}
	,run: function(e) {
		switch(e[1]) {
		case 0:
			var v = e[2];
			var _this = this.buf;
			var x = Std.string(this.resolve(v));
			_this.b += Std.string(x);
			break;
		case 1:
			var e1 = e[2];
			var _this1 = this.buf;
			var x1 = Std.string(e1());
			_this1.b += Std.string(x1);
			break;
		case 2:
			var eelse = e[4];
			var eif = e[3];
			var e2 = e[2];
			var v1 = e2();
			if(v1 == null || v1 == false) {
				if(eelse != null) {
					this.run(eelse);
				}
			} else {
				this.run(eif);
			}
			break;
		case 3:
			var str = e[2];
			this.buf.b += str == null ? "null" : "" + str;
			break;
		case 4:
			var l = e[2];
			var _g_head = l.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var e3 = val;
				this.run(e3);
			}
			break;
		case 5:
			var loop = e[3];
			var e4 = e[2];
			var v2 = e4();
			try {
				var x2 = $iterator(v2)();
				if(x2.hasNext == null) {
					throw new js__$Boot_HaxeError(null);
				}
				v2 = x2;
			} catch( e5 ) {
				try {
					if(v2.hasNext == null) {
						throw new js__$Boot_HaxeError(null);
					}
				} catch( e6 ) {
					throw new js__$Boot_HaxeError("Cannot iter on " + Std.string(v2));
				}
			}
			this.stack.push(this.context);
			var v3 = v2;
			var ctx = v3;
			while(ctx.hasNext()) {
				var ctx1 = ctx.next();
				this.context = ctx1;
				this.run(loop);
			}
			this.context = this.stack.pop();
			break;
		case 6:
			var params = e[3];
			var m = e[2];
			var v4 = Reflect.field(this.macros,m);
			var pl = [];
			var old = this.buf;
			pl.push($bind(this,this.resolve));
			var _g_head1 = params.h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var p = val1;
				if(p[1] == 0) {
					var v5 = p[2];
					pl.push(this.resolve(v5));
				} else {
					this.buf = new StringBuf();
					this.run(p);
					pl.push(this.buf.b);
				}
			}
			this.buf = old;
			try {
				var _this2 = this.buf;
				var x3 = Std.string(v4.apply(this.macros,pl));
				_this2.b += Std.string(x3);
			} catch( e7 ) {
				if (e7 instanceof js__$Boot_HaxeError) e7 = e7.val;
				var plstr;
				try {
					plstr = pl.join(",");
				} catch( e8 ) {
					plstr = "???";
				}
				var msg = "Macro call " + m + "(" + plstr + ") failed (" + Std.string(e7) + ")";
				throw new js__$Boot_HaxeError(msg);
			}
			break;
		}
	}
	,__class__: haxe_Template
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = true;
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return Type.resolveClass(name);
	}
	,resolveEnum: function(name) {
		return Type.resolveEnum(name);
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = true;
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe_Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		var _g = this.buf.charCodeAt(this.pos++);
		switch(_g) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Type.createEmptyInstance(cl1);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s1] != null) {
					h1.setReserved(s1,value);
				} else {
					h1.h[s1] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Type.createEmptyInstance(cl2);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf5.charCodeAt(i1++)];
				var c2 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c11 << 2 | c2 >> 4) & 255;
				var c3 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				var c4 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c3 << 6 | c4) & 255;
			}
			if(rest >= 2) {
				var c12 = codes[buf5.charCodeAt(i1++)];
				var c21 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c12 << 2 | c21 >> 4) & 255;
				if(rest == 3) {
					var c31 = codes[buf5.charCodeAt(i1++)];
					bytes.b[bpos++] = (c21 << 4 | c31 >> 2) & 255;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				var t = this.readFloat();
				d = new Date(t);
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
			break;
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s2 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = decodeURIComponent(s2.split("+").join(" "));
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = true;
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		var _g = bytes.length % 3;
		switch(_g) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask] & 255;
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask] & 255;
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255 & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var uapi_Hooks = function() { };
$hxClasses["uapi.Hooks"] = uapi_Hooks;
uapi_Hooks.__name__ = true;
uapi_Hooks.hookMethod = function(object,methodPath) {
	var method_original = null;
	var pipe = null;
	var retval = { pipe : function(func) {
		pipe = func;
	}};
	var sub_obj = methodPath.split(".");
	var methodName = sub_obj.pop();
	var _g = 0;
	while(_g < sub_obj.length) {
		var sub = sub_obj[_g];
		++_g;
		object = Reflect.getProperty(object,sub);
	}
	method_original = Reflect.getProperty(object,methodName);
	if(null != method_original) {
		var method_new = uapi_Hooks.makeVarArgs(function($arguments) {
			var pipe_ret = pipe != null ? pipe.apply(this,[$arguments]) : null;
			if(pipe_ret != null) {
				return pipe_ret;
			} else {
				return method_original.apply(this,$arguments);
			}
		});
		Reflect.setProperty(object,methodName,method_new);
	} else {
		throw new js__$Boot_HaxeError("" + methodName + "() does not exist on " + Std.string(object));
	}
	return retval;
};
uapi_Hooks.hookMethods = function(object,methods) {
	var pipe = null;
	var retval = { pipe : function(func) {
		pipe = func;
	}};
	var _g = 0;
	while(_g < methods.length) {
		var m = [methods[_g]];
		++_g;
		uapi_Hooks.hookMethod(object,m[0]).pipe((function(m1) {
			return function($arguments) {
				return pipe.apply(this,[m1[0],$arguments]);
			};
		})(m));
	}
	return retval;
};
uapi_Hooks.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f.apply(this,[a]);
	};
};
uapi_Hooks.HashPipe = function(immediate) {
	if(immediate == null) {
		immediate = false;
	}
	var pipe = null;
	var _args = new haxe_ds_StringMap();
	var _values = [];
	var hashChange = function(e) {
		var hash = window.location.hash;
		var toggle_arguments = [];
		if(pipe != null) {
			_args = uapi_Utils.KeyValueStringParser(hash,false);
		}
		var k = _args.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			if((__map_reserved[k1] != null ? _args.getReserved(k1) : _args.h[k1]) == null) {
				_args.remove(k1);
				toggle_arguments.push(k1);
			}
		}
		_values = toggle_arguments;
		pipe({ args : _args, values : _values});
	};
	var retval = { pipe : function(func) {
		pipe = func;
		if(immediate) {
			hashChange();
		}
		return { args : function() {
			return _args;
		}, values : function() {
			return _values;
		}, update : function(args,values,rewrite,toggle) {
			if(toggle == null) {
				toggle = true;
			}
			if(rewrite == null) {
				rewrite = false;
			}
			if(args != null) {
				if(rewrite) {
					if(args != null) {
						_args = args;
					}
					if(values != null) {
						_values = values;
					}
				} else {
					var k2 = args.keys();
					while(k2.hasNext()) {
						var k3 = k2.next();
						if(!(__map_reserved[k3] != null ? _args.existsReserved(k3) : _args.h.hasOwnProperty(k3))) {
							var value = __map_reserved[k3] != null ? args.getReserved(k3) : args.h[k3];
							if(__map_reserved[k3] != null) {
								_args.setReserved(k3,value);
							} else {
								_args.h[k3] = value;
							}
						} else if(toggle && (__map_reserved[k3] != null ? args.getReserved(k3) : args.h[k3]) == "") {
							args.remove(k3);
						}
					}
					if(values != null) {
						var _g = 0;
						while(_g < values.length) {
							var v = values[_g];
							++_g;
							var str = v == null ? "null" : "" + v;
							if(_values.indexOf(str) == -1) {
								_values.push(str);
							} else if(toggle) {
								var retval1 = _values.indexOf(str);
								_values.splice(retval1,1);
							}
						}
					}
				}
				var k4 = _args.keys();
				while(k4.hasNext()) {
					var k5 = k4.next();
					var retval2 = __map_reserved[k5] != null ? _args.getReserved(k5) : _args.h[k5];
					_values.push("" + k5 + "=" + retval2);
				}
				var retval3 = _values.join("/");
				window.location.hash = "!/" + retval3;
			}
		}};
	}};
	window.addEventListener("hashchange",hashChange);
	return retval;
};
var uapi_Utils = function() { };
$hxClasses["uapi.Utils"] = uapi_Utils;
uapi_Utils.__name__ = true;
uapi_Utils.KeyValueStringParser = function(location,QueryString) {
	if(QueryString == null) {
		QueryString = true;
	}
	if(location == null) {
		if(QueryString) {
			location = window.location.search;
		} else {
			location = window.location.hash;
		}
	}
	while(QueryString == true ? location.charAt(0) == "?" : location.charAt(0) == "#" || location.charAt(0) == "!") location = HxOverrides.substr(location,1,null);
	var h = location.split(QueryString ? "&" : "/");
	var retval = new haxe_ds_StringMap();
	var t;
	var _g1 = 0;
	var _g = h.length;
	while(_g1 < _g) {
		var l = _g1++;
		if(h[l].length > 0) {
			var split = h[l].indexOf("=");
			t = [];
			if(split != -1) {
				t[0] = HxOverrides.substr(h[l],0,split);
				t[1] = HxOverrides.substr(h[l],split + 1,null);
			} else {
				t[0] = h[l];
			}
			var value = t.length > 1 ? decodeURIComponent(t[1].split("+").join(" ")) : null;
			var key = t[0];
			if(__map_reserved[key] != null) {
				retval.setReserved(key,value);
			} else {
				retval.h[key] = value;
			}
		}
	}
	return retval;
};
uapi_Utils.write = function(str) {
	var it;
	var last = window.document.body.lastElementChild;
	it = last;
	while(it != null) {
		it = it.lastElementChild;
		if(it != null) {
			last = it;
		}
	}
	last.parentElement.insertAdjacentHTML("afterbegin",str);
	return;
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
$hxClasses["Math"] = Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = true;
$hxClasses["Array"] = Array;
Array.__name__ = true;
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses["Int"] = { __name__ : ["Int"]};
var Dynamic = $hxClasses["Dynamic"] = { __name__ : ["Dynamic"]};
var Float = $hxClasses["Float"] = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses["Bool"] = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses["Class"] = { __name__ : ["Class"]};
var Enum = { };
haxe_Resource.content = [{ name : "template", data : "PGh0bWw+CiAgICA8aGVhZD4KICAgICAgICA8c3R5bGU+CiAgICAgICAgICAgIGh0bWwsIGJvZHkgewogICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6QXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjsKICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IGRpbWdyYXk7CiAgICAgICAgICAgICAgICBjb2xvcjogYmxhY2s7CiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwOwogICAgICAgICAgICAgICAgbWFyZ2luOiAwOwogICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7CiAgICAgICAgICAgICAgICBmb250LXNpemU6IDEwcHg7CiAgICAgICAgICAgICAgICBmb250LWZhbWlseTogc2Fucy1zZXJpZjsKICAgICAgICAgICAgfQogICAgICAgICAgICAudGl0bGUgewogICAgICAgICAgICAgICAgdG9wOiAxLjVweDsKICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IGluaGVyaXQ7CiAgICAgICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDVweDsKICAgICAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDVweDsKICAgICAgICAgICAgfQogICAgICAgICAgICAudGl0bGUsIC50aXRsZSBhIHsKICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgICAgICAgICAgIHJpZ2h0OiAwcHg7CiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogMTAwOwogICAgICAgICAgICAgICAgZm9udC1zaXplOiAxMHB4OwogICAgICAgICAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7CiAgICAgICAgICAgICAgICBmb250LXZhcmlhbnQtY2Fwczogc21hbGwtY2FwczsKICAgICAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKICAgICAgICAgICAgfQogICAgICAgICAgICAubG9hZGluZyB7CiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBmaXhlZDsKICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTsKICAgICAgICAgICAgICAgIC8qZmlsdGVyOiBibHVyKDEuMnB4KTsqLwogICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogdmlzaWJsZTsKICAgICAgICAgICAgfQogICAgICAgICAgICAuaGlkZSB7CiAgICAgICAgICAgICAgICBhbmltYXRpb246IGhpZGUgLjNzIGxpbmVhciBmb3J3YXJkczsKICAgICAgICAgICAgfQogICAgICAgICAgICAubG9hZGluZyBkaXYgewogICAgICAgICAgICAgICAgd2lkdGg6IDIwJTsKICAgICAgICAgICAgICAgIGNvbG9yOiB3aGl0ZTsKICAgICAgICAgICAgICAgIG1hcmdpbjogMDsKICAgICAgICAgICAgICAgIHRvcDogNTAlOwogICAgICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7CiAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICAgICAgICAgICAgICBsZWZ0OiA1MCU7CiAgICAgICAgICAgICAgICBvcGFjaXR5OiAuNTsKICAgICAgICAgICAgfQogICAgICAgICAgICAubG9hZGluZyBkaXYgc3ZnIHsKICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogbG9hZGluZyA1cyBpbmZpbml0ZSBsaW5lYXIgYmFja3dhcmRzOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGEgewogICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlICFpbXBvcnRhbnQ7CiAgICAgICAgICAgICAgICBjb2xvcjogYmxhY2s7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLmNvbnRyb2xzewogICAgICAgICAgICAgICAgcG9zaXRpb246YWJzb2x1dGU7CiAgICAgICAgICAgICAgICBib3R0b206IDA7CiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IGdhaW5zYm9ybzsKICAgICAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLm1lc3NhZ2Vib3h7CiAgICAgICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC5jb250cm9scyAjZXJyb3IgewogICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGF1dG87CiAgICAgICAgICAgICAgICBtYXJnaW46IDBweCAwcHggMHB4IDJweDsKICAgICAgICAgICAgICAgIG1heC1oZWlnaHQ6IDI1MHB4OwogICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgI2Vycm9yIC5tZXNzYWdlIHsKICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTBweCAhaW1wb3J0YW50OwogICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6IE1lbmxvLCBtb25vc3BhY2U7CiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogMTAwOwogICAgICAgICAgICAgICAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7CiAgICAgICAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgZ3JleTsKICAgICAgICAgICAgICAgIHdoaXRlLXNwYWNlOiBwcmU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIC5tZXNzYWdlOmhvdmVyIHsKICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IGxpZ2h0Z3JheTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLmZvbGRlZCB7CiAgICAgICAgICAgICAgICBoZWlnaHQ6IDE1cHg7CiAgICAgICAgICAgICAgICBvdmVyZmxvdzpoaWRkZW47CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgfQogICAgICAgICAgICAjZXJyb3IgewogICAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC5mb2xkZWQgI2Vycm9yIHsKICAgICAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgI21lc3NhZ2Vjb3VudCB7CiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogMnB4OwogICAgICAgICAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7CiAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICAgICAgICAgICAgICBoZWlnaHQ6IDE1cHg7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgI21lc3NhZ2Vjb3VudDpob3ZlciB7CiAgICAgICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsKICAgICAgICAgICAgfQogICAgICAgICAgICAjbWVzc2FnZWNvdW50OjpiZWZvcmUgewogICAgICAgICAgICAgICAgY29udGVudDogIuKWvCI7CiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDJweDsKICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAxMDBtcyBsaW5lYXI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLmZvbGRlZCAjbWVzc2FnZWNvdW50OjpiZWZvcmUgewogICAgICAgICAgICAgICAgY29udGVudDogIuKWvCI7CiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtOTBkZWcpOwogICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAycHg7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICNjb250cm9sc19lbGVtZW50cyB7CiAgICAgICAgICAgICAgICBwYWRkaW5nOiAxMHB4IDEycHggNXB4IDEycHg7CiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgICAgICAgICAgZmxleC13cmFwOiB3cmFwOwogICAgICAgICAgICB9CiAgICAgICAgICAgICNjb250cm9sc19lbGVtZW50cyBkaXY6aG92ZXIgewogICAgICAgICAgICAgICAgYmFja2dyb3VuZDogbGlnaHRncmV5OwogICAgICAgICAgICB9CiAgICAgICAgICAgICNjb250cm9sc19lbGVtZW50cyBsYWJlbCB7CiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogMnB4OwogICAgICAgICAgICB9CiAgICAgICAgICAgICNjb250cm9sc19lbGVtZW50cyBkaXYgc2VsZWN0IHsKICAgICAgICAgICAgICAgIHdpZHRoOiA5OSU7CiAgICAgICAgICAgICAgICBjdXJzb3I6cG9pbnRlcjsKICAgICAgICAgICAgfQogICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogMTEwMHB4KSB7CiAgICAgICAgICAgICAgICAjY29udHJvbHNfZWxlbWVudHMgZGl2IHsKICAgICAgICAgICAgICAgICAgICB3aWR0aDogMjUlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiA4MDBweCkgewogICAgICAgICAgICAgICAgI2NvbnRyb2xzX2VsZW1lbnRzIGRpdiB7CiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDMzJTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogNDAwcHgpIHsKICAgICAgICAgICAgICAgICNjb250cm9sc19lbGVtZW50cyBkaXYgewogICAgICAgICAgICAgICAgICAgIHdpZHRoOiA1MCU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8qICBtYWtlIHNjcm9sbGJhciBpbnZpc2libGUgKgogICAgICAgICAgICA6Oi13ZWJraXQtc2Nyb2xsYmFyIHsKICAgICAgICAgICAgICAgIHdpZHRoOiAwcHg7ICAKICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50OyAgCiAgICAgICAgICAgIH0qLwogICAgICAgICAgICAKICAgICAgICAgICAgQGtleWZyYW1lcyBsb2FkaW5nIHsKICAgICAgICAgICAgICAgIGZyb20ge3RyYW5zZm9ybTpyb3RhdGUoMGRlZyk7fQogICAgICAgICAgICAgICAgdG8ge3RyYW5zZm9ybTpyb3RhdGUoMzYwZGVnKTt9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgQGtleWZyYW1lcyBoaWRlIHsKICAgICAgICAgICAgICAgIGZyb20ge29wYWNpdHk6Ljg7IHZpc2liaWxpdHk6IHZpc2libGU7fQogICAgICAgICAgICAgICAgdG8ge29wYWNpdHk6IDAuMDsgdmlzaWJpbGl0eTogaGlkZGVuO30KICAgICAgICAgICAgfQoKICAgICAgICA8L3N0eWxlPgogICAgICAgIDxzY3JpcHQ+CiAgICAgICAgICAgIGlmKCFmcmFtZUVsZW1lbnQpCiAgICAgICAgICAgICAgICB0aHJvdyAiY2hlY2sgc2FtZS1vcmlnaW4gcG9saWN5IjsKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgaWYoJ2hvb2snIGluIGZyYW1lRWxlbWVudCkKICAgICAgICAgICAgICAgICAgICBmcmFtZUVsZW1lbnQuaG9vayh3aW5kb3cpOwogICAgICAgICAgICAvL3VzZWQgL3Jlcy9wbGF5ZXJzLyo6CiAgICAgICAgICAgIHZhciB1cmkgPSB1bmVzY2FwZSgnOjp1cmk6OicpOyAKICAgICAgICAgICAgdmFyIHRpdGxlID0gdW5lc2NhcGUoJzo6dGl0bGU6OiAoOjp0aXRsZV92ZXJzaW9uOjopJyk7CiAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgOjpoZWFkOjoKICAgIDwvaGVhZD4KICAgIDxib2R5PgogICAgICAgIDxkaXYgaWQ9ImxvYWRlciIgY2xhc3M9ImxvYWRpbmciPgogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICA6OmxvYWRpbmc6OgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8dmlkZW8gaWQ9InZpZGVvIiB3aWR0aD0iMTAwJSIgJCRwb3N0ZXIoKSA6OmlmIGF0dHJfY29udHJvbHM6OmNvbnRyb2xzOjplbmQ6OiA6OmlmIGF0dHJfcGxheXNpbmxpbmU6OnBsYXlzaW5saW5lOjplbmQ6OiA6OmlmIGF0dHJfbXV0ZWQ6Om11dGVkOjplbmQ6OiA6OmlmIGF0dHJfYXV0b3BsYXk6OmF1dG9wbGF5OjplbmQ6OiA+PC92aWRlbz4KICAgICAgICA8ZGl2IGlkPSJ0dG1sIj48L2Rpdj4KICAgICAgICAgICAgOjpib2R5OjoKICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0iY29udHJvbHMiPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0idGl0bGUiPjo6dGl0bGU6OiZuYnNwOzxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSI6OnRpdGxlX2hyZWY6OiI+KDo6dGl0bGVfdmVyc2lvbjo6KTwvYT48L3NwYW4+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lc3NhZ2Vib3ggZm9sZGVkIj48ZGl2IGlkPSJtZXNzYWdlY291bnQiPm5vIG1lc3NhZ2VzCgogICAgICAgICAgICA8L2Rpdj48ZGl2IGlkPSJlcnJvciI+PC9kaXY+PC9kaXY+CiAgICAgICAgICAgIDo6Y29udHJvbHM6OgogICAgICAgIDwvZGl2PgogICAgICAgIDxzY3JpcHQ+CiAgICAgICAgICAgIGlmKCdob29rX2VuZCcgaW4gZnJhbWVFbGVtZW50KQogICAgICAgICAgICAgICAgZnJhbWVFbGVtZW50Lmhvb2tfZW5kKHdpbmRvdywgdmlkZW8pOwogICAgICAgIDwvc2NyaXB0PgogICAgPC9ib2R5Pgo8L2h0bWw+"},{ name : "shaka-argan", data : "eyJkcm1fc2VydmVyX3dpZGV2aW5lIjp7ImhlbHAiOiJjb20ud2lkZXZpbmUuYWxwaGEiLCJkZWZhdWx0XyI6IltkZWZhdWx0OiBDU3RyaW5nKGh0dHBzOi8vd2lkZXZpbmUtcHJveHkuYXBwc3BvdC5jb20vcHJveHkpXSJ9LCJzZXRUZXh0VHJhY2tWaXNpYmlsaXR5Ijp7ImhlbHAiOiJUZXh0IFRyYWNrcyB2aXNpYmxlIiwiZGVmYXVsdF8iOiJbZGVmYXVsdDogQ0lkZW50KHRydWUpXSJ9LCJkcm1fc2VydmVyX3BsYXlyZWFkeSI6eyJoZWxwIjoiY29tLndpZGV2aW5lLmFscGhhIiwiZGVmYXVsdF8iOiJbZGVmYXVsdDogQ1N0cmluZyhodHRwczovL3BsYXlyZWFkeS5kaXJlY3R0YXBzLm5ldC9wci9zdmMvcmlnaHRzbWFuYWdlci5hc214P1BsYXlSaWdodD0xJlVzZVNpbXBsZU5vblBlcnNpc3RlbnRMaWNlbnNlPTEmUGxheUVuYWJsZXJzPTc4NjYyN0Q4LUMyQTYtNDRCRS04Rjg4LTA4QUUyNTVCMDFBNyldIn19"},{ name : "_help_map", data : "Ynk1OnF1aWV0b3k0OmhlbHB5Mzg6ZG8lMjBub3QlMjBzaG93JTIwZXJyb3JzJTIwaW4lMjBvdXRwdXR5ODpkZWZhdWx0X3kzNjolNUJkZWZhdWx0JTNBJTIwQ0lkZW50JTI4ZmFsc2UlMjklNURneTU6bXV0ZWRvUjF5MzQ6c2V0JTIwdmlkZW9lbGVtZW50JTIwbXV0ZWQlMjBzdGF0ZVIzUjRneTExOnBsYXlzaW5saW5lb1IxeTQ4OmRpc2FibGUlMjB2aWRlb2VsZW1lbnQlMjBwbGF5c2lubGluZSUyMGF0dHJpYnV0ZVIzeTM1OiU1QmRlZmF1bHQlM0ElMjBDSWRlbnQlMjh0cnVlJTI5JTVEZ3k4OmF1dG9wbGF5b1IxeTM3OnNldCUyMHZpZGVvZWxlbWVudCUyMGF1dG9wbGF5JTIwc3RhdGVSM1I5Z3k4OmNvbnRyb2xzb1IxeTQ2OmRpc2FibGUlMjB2aWRlb2VsZW1lbnQlMjBidWlsdCUyMGluJTIwY29udHJvbHNSM1I5Z2g"},{ name : "hlsjs-src", data : "ewogICAgIjAuMTAuMSI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvaGxzLmpzLzAuMTAuMS9obHMuanMiXQp9Cg"},{ name : "hasplayer-src", data : "ewogICAgIjEuMTUuMCI6IFsiaHR0cHM6Ly9vcmFuZ2Utb3BlbnNvdXJjZS5naXRodWIuaW8vaGFzcGxheWVyLmpzLzEuMTUuMC9kaXN0L2hhc3BsYXllci5qcyJdLAogICAgIjEuMTQuMiI6IFsiaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9oYXNwbGF5ZXIuanNAMS4xNC4yL2Rpc3QvaGFzcGxheWVyLm1pbi5qcyJdCn0"},{ name : "dashjs", data : ""},{ name : "shaka", data : ""},{ name : "hasplayer-argan", data : "eyJkcm1fc2VydmVyX3dpZGV2aW5lIjp7ImhlbHAiOiJjb20ud2lkZXZpbmUuYWxwaGEiLCJkZWZhdWx0XyI6IltkZWZhdWx0OiBDU3RyaW5nKGh0dHBzOi8vd2lkZXZpbmUtcHJveHkuYXBwc3BvdC5jb20vcHJveHkpXSJ9LCJkcm1fc2VydmVyX3BsYXlyZWFkeSI6eyJoZWxwIjoiY29tLndpZGV2aW5lLmFscGhhIiwiZGVmYXVsdF8iOiJbZGVmYXVsdDogQ1N0cmluZyhodHRwczovL3BsYXlyZWFkeS5kaXJlY3R0YXBzLm5ldC9wci9zdmMvcmlnaHRzbWFuYWdlci5hc214P1BsYXlSaWdodD0xJlVzZVNpbXBsZU5vblBlcnNpc3RlbnRMaWNlbnNlPTEmUGxheUVuYWJsZXJzPTc4NjYyN0Q4LUMyQTYtNDRCRS04Rjg4LTA4QUUyNTVCMDFBNyldIn19"},{ name : "shaka-src", data : ""},{ name : "hasplayer", data : ""},{ name : "dashjs-src", data : "ewogICAgIjIuOS4wIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi45LjAvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjguMCI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzIuOC4wL2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMi43LjAiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjcuMC9kYXNoLmFsbC5kZWJ1Zy5qcyJdLAogICAgIjIuNi44IjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi42LjgvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjYuNyI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzIuNi43L2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMi42LjYiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjYuNi9kYXNoLmFsbC5kZWJ1Zy5qcyJdLAogICAgIjIuNi41IjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi42LjUvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjYuNCI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzIuNi40L2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMi42LjMiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjYuMy9kYXNoLmFsbC5kZWJ1Zy5qcyJdLAogICAgIjIuNi4yIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi42LjIvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjYuMSI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzIuNi4xL2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMi42LjAiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjYuMC9kYXNoLmFsbC5kZWJ1Zy5qcyJdLAogICAgIjIuNS4wIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi41LjAvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjQuMSI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzIuNC4xL2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMi40LjAiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjQuMC9kYXNoLmFsbC5kZWJ1Zy5qcyJdLAogICAgIjIuMy4wIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi4zLjAvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjIuMCI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzIuMi4wL2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMi4xLjEiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjEuMS9kYXNoLmFsbC5kZWJ1Zy5qcyJdLAogICAgIjIuMS4wIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi4xLjAvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjAuMC1yYzUiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjAuMC1yYzUvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjAuMC1yYzQiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjAuMC1yYzQvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjAuMCI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzIuMC4wL2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMS42LjAiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8xLjYuMC9kYXNoLmRlYnVnLmpzIl0sCiAgICAiMS41LjEiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8xLjUuMS9kYXNoLmRlYnVnLmpzIl0sCiAgICAiMS41LjAiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8xLjUuMC9kYXNoLmRlYnVnLmpzIl0sCiAgICAiMS40ICAiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8xLjQvZGFzaC5kZWJ1Zy5qcyJdLAogICAgIjEuMy4wIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMS4zLjAvZGFzaC5kZWJ1Zy5qcyJdLAogICAgIjEuMi4wIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMS4yLjAvZGFzaC5hbGwuanMiXSwKICAgICIxLjEuMiI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzEuMS4yL2Rhc2guYWxsLmpzIl0sCiAgICAiMS4wLjAiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8xLjAuMC9kYXNoLmFsbC5qcyJdLAogICAgIjAuMi41IjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMC4yLjUvZGFzaC5hbGwuanMiXSwKICAgICIwLjIuNCI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzAuMi40L2Rhc2guYWxsLmpzIl0KfQ"},{ name : "hlsjs", data : "ZGF0YTp0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTg7YmFzZTY0LEx5OGdSMlZ1WlhKaGRHVmtJR0o1SUVoaGVHVWdNeTQwTGpjS0tHWjFibU4wYVc5dUlDZ2taMnh2WW1Gc0tTQjdJQ0oxYzJVZ2MzUnlhV04wSWpzS2RtRnlJQ1JvZUVOc1lYTnpaWE1nUFNCN2ZTd2taWE4wY2lBOUlHWjFibU4wYVc5dUtDa2dleUJ5WlhSMWNtNGdhbk5mUW05dmRDNWZYM04wY21sdVoxOXlaV01vZEdocGN5d25KeWs3SUgwN0NtWjFibU4wYVc5dUlDUmxlSFJsYm1Rb1puSnZiU3dnWm1sbGJHUnpLU0I3Q2dsbWRXNWpkR2x2YmlCSmJtaGxjbWwwS0NrZ2UzMGdTVzVvWlhKcGRDNXdjbTkwYjNSNWNHVWdQU0JtY205dE95QjJZWElnY0hKdmRHOGdQU0J1WlhjZ1NXNW9aWEpwZENncE93b0pabTl5SUNoMllYSWdibUZ0WlNCcGJpQm1hV1ZzWkhNcElIQnliM1J2VzI1aGJXVmRJRDBnWm1sbGJHUnpXMjVoYldWZE93b0phV1lvSUdacFpXeGtjeTUwYjFOMGNtbHVaeUFoUFQwZ1QySnFaV04wTG5CeWIzUnZkSGx3WlM1MGIxTjBjbWx1WnlBcElIQnliM1J2TG5SdlUzUnlhVzVuSUQwZ1ptbGxiR1J6TG5SdlUzUnlhVzVuT3dvSmNtVjBkWEp1SUhCeWIzUnZPd3A5Q25aaGNpQkJjbWRoYmlBOUlHWjFibU4wYVc5dUtDa2dleUI5T3dva2FIaERiR0Z6YzJWeld5SkJjbWRoYmlKZElEMGdRWEpuWVc0N0NrRnlaMkZ1TGw5ZmJtRnRaVjlmSUQwZ2RISjFaVHNLUVhKbllXNHVjM1JoY25RZ1BTQm1kVzVqZEdsdmJpaGpiMjVtYVdjcElIc0tDV2xtS0c1MWJHd2dJVDBnWTI5dVptbG5LU0I3Q2drSmRtRnlJR0Z5WjNOZmMyVjBJRDBnYm1WM0lHaGhlR1ZmWkhOZlUzUnlhVzVuVFdGd0tDazdDZ2tKZG1GeUlGOW5JRDBnTURzS0NRbDJZWElnWDJjeElEMGdVbVZtYkdWamRDNW1hV1ZzWkhNb1kyOXVabWxuS1RzS0NRbDNhR2xzWlNoZlp5QThJRjluTVM1c1pXNW5kR2dwSUhzS0NRa0pkbUZ5SUdZZ1BTQmZaekZiWDJkZE93b0pDUWtySzE5bk93b0pDUWwyWVhJZ2RtRnNkV1VnUFNCU1pXWnNaV04wTG1acFpXeGtLR052Ym1acFp5eG1LVHNLQ1FrSmFXWW9YMTl0WVhCZmNtVnpaWEoyWldSYlpsMGdJVDBnYm5Wc2JDa2dld29KQ1FrSllYSm5jMTl6WlhRdWMyVjBVbVZ6WlhKMlpXUW9aaXgyWVd4MVpTazdDZ2tKQ1gwZ1pXeHpaU0I3Q2drSkNRbGhjbWR6WDNObGRDNW9XMlpkSUQwZ2RtRnNkV1U3Q2drSkNYMEtDUWw5Q2drSlFYSm5ZVzR1WVhKbmN5QTlJR0Z5WjNOZmMyVjBPd29KZlFwOU93cEJjbWRoYmk1dlltcGxZM1JHY205dFRXRndJRDBnWm5WdVkzUnBiMjRvYldGd0tTQjdDZ2wyWVhJZ2IySnFJRDBnZXlCOU93b0pkbUZ5SUdzZ1BTQnRZWEF1YTJWNWN5Z3BPd29KZDJocGJHVW9heTVvWVhOT1pYaDBLQ2twSUhzS0NRbDJZWElnYXpFZ1BTQnJMbTVsZUhRb0tUc0tDUWx2WW1wYmF6RmRJRDBnWDE5dFlYQmZjbVZ6WlhKMlpXUmJhekZkSUNFOUlHNTFiR3dnUHlCdFlYQXVaMlYwVW1WelpYSjJaV1FvYXpFcElEb2diV0Z3TG1oYmF6RmRPd29KZlFvSmNtVjBkWEp1SUc5aWFqc0tmVHNLZG1GeUlFaHNjMHB6SUQwZ1puVnVZM1JwYjI0b0tTQjdDZ2wyWVhJZ1h6c0tDWFpoY2lCZk1Uc0tDV2xtS0VGeVoyRnVMbUZ5WjNNZ0lUMGdiblZzYkNrZ2V3b0pDWFpoY2lCZmRHaHBjeUE5SUVGeVoyRnVMbUZ5WjNNN0Nna0phV1lvWDE5dFlYQmZjbVZ6WlhKMlpXUmJJbVJ5YlY5elpYSjJaWEpmZDJsa1pYWnBibVVpWFNBaFBTQnVkV3hzS1NCN0Nna0pDVjh4SUQwZ1gzUm9hWE11WlhocGMzUnpVbVZ6WlhKMlpXUW9JbVJ5YlY5elpYSjJaWEpmZDJsa1pYWnBibVVpS1RzS0NRbDlJR1ZzYzJVZ2V3b0pDUWxmTVNBOUlGOTBhR2x6TG1ndWFHRnpUM2R1VUhKdmNHVnlkSGtvSW1SeWJWOXpaWEoyWlhKZmQybGtaWFpwYm1VaUtUc0tDUWw5Q2dsOUlHVnNjMlVnZXdvSkNWOHhJRDBnWm1Gc2MyVTdDZ2w5Q2dscFppaGZNU2tnZXdvSkNYWmhjaUJmZEdocGN6RWdQU0JCY21kaGJpNWhjbWR6T3dvSkNXbG1LRjlmYldGd1gzSmxjMlZ5ZG1Wa1d5SmtjbTFmYzJWeWRtVnlYM2RwWkdWMmFXNWxJbDBnSVQwZ2JuVnNiQ2tnZXdvSkNRbGZJRDBnWDNSb2FYTXhMbWRsZEZKbGMyVnlkbVZrS0NKa2NtMWZjMlZ5ZG1WeVgzZHBaR1YyYVc1bElpazdDZ2tKZlNCbGJITmxJSHNLQ1FrSlh5QTlJRjkwYUdsek1TNW9XeUprY20xZmMyVnlkbVZ5WDNkcFpHVjJhVzVsSWwwN0Nna0pmUW9KZlNCbGJITmxJSHNLQ1FsZklEMGdJbWgwZEhCek9pOHZkMmxrWlhacGJtVXRjSEp2ZUhrdVlYQndjM0J2ZEM1amIyMHZjSEp2ZUhraU93b0pmUW9KZEdocGN5NW9iSE5EYjI1bWFXY2dQU0I3SUdSbFluVm5JRG9nWm1Gc2MyVXNJSGRwWkdWMmFXNWxUR2xqWlc1elpWVnliQ0E2SUY4c0lHVnRaVVZ1WVdKc1pXUWdPaUIwY25WbGZUc0tmVHNLSkdoNFEyeGhjM05sYzFzaVNHeHpTbk1pWFNBOUlFaHNjMHB6T3dwSWJITktjeTVmWDI1aGJXVmZYeUE5SUhSeWRXVTdDa2hzYzBwekxtMWhhVzRnUFNCbWRXNWpkR2x2YmlncElIc0tDWFpoY2lCMmFXUmxieUE5SUhkcGJtUnZkeTVrYjJOMWJXVnVkQzVuWlhSRmJHVnRaVzUwUW5sSlpDZ2lkbWxrWlc4aUtUc0tDWFpoY2lCMWNta2dQU0JTWldac1pXTjBMbVpwWld4a0tIZHBibVJ2ZHl3aWRYSnBJaWs3Q2dsMllYSWdTR3h6SUQwZ1VtVm1iR1ZqZEM1bWFXVnNaQ2gzYVc1a2IzY3NJa2hzY3lJcE93b0pkMmx1Wkc5M0xtaGxiSEFnUFNCbWRXNWpkR2x2YmlncElIc0tDUWx5WlhSMWNtNGdRWEpuWVc0dWIySnFaV04wUm5KdmJVMWhjQ2hvWVhobFgxVnVjMlZ5YVdGc2FYcGxjaTV5ZFc0b2FHRjRaVjlTWlhOdmRYSmpaUzVuWlhSVGRISnBibWNvSWw5b1pXeHdYMjFoY0NJcEtTazdDZ2w5T3dvSlFYSm5ZVzR1YzNSaGNuUW9kMmx1Wkc5M0xtTnZibVpwWnlrN0NnbHBaaWhJYkhNZ0lUMGdiblZzYkNBbUppQkliSE11YVhOVGRYQndiM0owWldRb0tTa2dld29KQ1haaGNpQndiR0Y1WlhJZ1BTQkliSE5LY3k1bGVIQnZjMlZmY0d4aGVXVnlLRzVsZHlCSWJITW9TR3h6U25NdWFHeHpRMjl1Wm1sbktTazdDZ2tKY0d4aGVXVnlMbXh2WVdSVGIzVnlZMlVvZFhKcEtUc0tDUWx3YkdGNVpYSXVZWFIwWVdOb1RXVmthV0VvZG1sa1pXOHBPd29KQ1hCc1lYbGxjaTV2YmloSWJITXVSWFpsYm5SekxrMUJUa2xHUlZOVVgxQkJVbE5GUkN4bWRXNWpkR2x2YmlncElIc0tDUWtKZG1GeUlIWnBaR1Z2VkhKaFkydHpJRDBnVzNzZ2RHbDBiR1VnT2lBaVFYVjBieUJ6ZDJsMFkyZ2lMQ0JwYm1adklEb2diblZzYkgxZE93b0pDUWwyWVhJZ1ZtbGtaVzlVY21GamEwbHVabTlNYVhOMElEMGdjR3hoZVdWeUxteGxkbVZzY3pzS0NRa0pkbUZ5SUY5bklEMGdNRHNLQ1FrSmQyaHBiR1VvWDJjZ1BDQldhV1JsYjFSeVlXTnJTVzVtYjB4cGMzUXViR1Z1WjNSb0tTQjdDZ2tKQ1FsMllYSWdhVzVtYnlBOUlGWnBaR1Z2VkhKaFkydEpibVp2VEdsemRGdGZaMTA3Q2drSkNRa3JLMTluT3dvSkNRa0pkbWxrWlc5VWNtRmphM011Y0hWemFDaDdJSFJwZEd4bElEb2dJaUlnS3lCcGJtWnZMbUpwZEhKaGRHVWdMeUF4TURBd0lDc2dJaUJyWW5Ceklpd2dhVzVtYnlBNklHbHVabTk5S1RzS0NRa0pmUW9KQ1FscFppaFdhV1JsYjFSeVlXTnJTVzVtYjB4cGMzUXViR1Z1WjNSb0lENGdNU2tnZXdvSkNRa0pZV1JrVFdWdWRTZ2lWbWxrWlc4Z2RISmhZMnR6SWl4MmFXUmxiMVJ5WVdOcmN5eG1kVzVqZEdsdmJpaGxLU0I3Q2drSkNRa0pjR3hoZVdWeUxtNWxlSFJNWlhabGJDQTlJR1V1ZEdGeVoyVjBMbk5sYkdWamRHVmtTVzVrWlhnZ0xTQXhPd29KQ1FrSmZTeHdiR0Y1WlhJdVkzVnljbVZ1ZEV4bGRtVnNLVHNLQ1FrSmZRb0pDUWwyWVhJZ1lYVmthVzlVY21GamEzTWdQU0JiZXlCMGFYUnNaU0E2SUNKQmRYUnZJSE4zYVhSamFDSXNJR2x1Wm04Z09pQnVkV3hzZlYwN0Nna0pDWFpoY2lCQmRXUnBiMVJ5WVdOclNXNW1iMHhwYzNRZ1BTQndiR0Y1WlhJdVlYVmthVzlVY21GamEzTTdDZ2tKQ1haaGNpQmZaekVnUFNBd093b0pDUWwzYUdsc1pTaGZaekVnUENCQmRXUnBiMVJ5WVdOclNXNW1iMHhwYzNRdWJHVnVaM1JvS1NCN0Nna0pDUWwyWVhJZ2FXNW1iekVnUFNCQmRXUnBiMVJ5WVdOclNXNW1iMHhwYzNSYlgyY3hYVHNLQ1FrSkNTc3JYMmN4T3dvSkNRa0pZWFZrYVc5VWNtRmphM011Y0hWemFDaDdJSFJwZEd4bElEb2dJaUlnS3lCVGRHUXVjM1J5YVc1bktHbHVabTh4TG01aGJXVXBJQ3NnSWxzaUlDc2dVM1JrTG5OMGNtbHVaeWhwYm1adk1TNW5jbTkxY0Vsa0tTQXJJQ0pkSWl3Z2FXNW1ieUE2SUdsdVptOHhmU2s3Q2drSkNYMEtDUWtKYVdZb1FYVmthVzlVY21GamEwbHVabTlNYVhOMExteGxibWQwYUNBK0lERXBJSHNLQ1FrSkNXRmtaRTFsYm5Vb0lrRjFaR2x2SUhSeVlXTnJjeUlzWVhWa2FXOVVjbUZqYTNNc1puVnVZM1JwYjI0b1pURXBJSHNLQ1FrSkNRbHdiR0Y1WlhJdVlYVmthVzlVY21GamF5QTlJR1V4TG5SaGNtZGxkQzV6Wld4bFkzUmxaRWx1WkdWNElDMGdNVHNLQ1FrSkNYMHNjR3hoZVdWeUxtRjFaR2x2VkhKaFkyc3BPd29KQ1FsOUNna0pDV2xtS0hacFpHVnZMbWhoYzBGMGRISnBZblYwWlNnaVlYVjBiM0JzWVhraUtTa2dld29KQ1FrSmRtbGtaVzh1Y0d4aGVTZ3BPd29KQ1FsOUNna0pmU2s3Q2drSmNHeGhlV1Z5TG05dUtFaHNjeTVGZG1WdWRITXVVMVZDVkVsVVRFVmZWRkpCUTB0VFgxVlFSRUZVUlVRc1puVnVZM1JwYjI0b0tTQjdDZ2tKQ1haaGNpQjBaWGgwVkhKaFkydHpJRDBnVzEwN0Nna0pDWFpoY2lCVVpYaDBWSEpoWTJ0SmJtWnZUR2x6ZENBOUlIQnNZWGxsY2k1emRXSjBhWFJzWlZSeVlXTnJjenNLQ1FrSmRtRnlJRjluTWlBOUlEQTdDZ2tKQ1hkb2FXeGxLRjluTWlBOElGUmxlSFJVY21GamEwbHVabTlNYVhOMExteGxibWQwYUNrZ2V3b0pDUWtKZG1GeUlHbHVabTh5SUQwZ1ZHVjRkRlJ5WVdOclNXNW1iMHhwYzNSYlgyY3lYVHNLQ1FrSkNTc3JYMmN5T3dvSkNRa0pkR1Y0ZEZSeVlXTnJjeTV3ZFhOb0tIc2dkR2wwYkdVZ09pQWlJaUFySUZOMFpDNXpkSEpwYm1jb2FXNW1iekl1Ym1GdFpTa3NJR2x1Wm04Z09pQnBibVp2TW4wcE93b0pDUWw5Q2drSkNXbG1LSFJsZUhSVWNtRmphM011YkdWdVozUm9JRDRnTUNrZ2V3b0pDUWtKWVdSa1RXVnVkU2dpVkdWNGRDQjBjbUZqYTNNaUxIUmxlSFJVY21GamEzTXNablZ1WTNScGIyNG9aVElwSUhzS0NRa0pDUWx3YkdGNVpYSXVjM1ZpZEdsMGJHVlVjbUZqYXlBOUlHVXlMblJoY21kbGRDNXpaV3hsWTNSbFpFbHVaR1Y0T3dvSkNRa0pmU3h3YkdGNVpYSXVjM1ZpZEdsMGJHVlVjbUZqYXlrN0Nna0pDWDBLQ1FsOUtUc0tDWDBnWld4elpTQnBaaWgyYVdSbGJ5NWpZVzVRYkdGNVZIbHdaU2dpWVhCd2JHbGpZWFJwYjI0dmRtNWtMbUZ3Y0d4bExtMXdaV2QxY213aUtTNXNaVzVuZEdnZ1BpQXdLU0I3Q2drSmQybHVaRzkzTG1OdmJuTnZiR1V1Ykc5bktDSkhiMmx1WnlCbWIzSWdibUYwYVhabElFaE1VeUJ3YkdGNVltRmpheUJ2WmlBaUlDc2dkWEpwS1RzS0NRbDJhV1JsYnk1emNtTWdQU0IxY21rN0Nna0pkbWxrWlc4dVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnaWJHOWhaR1ZrYldWMFlXUmhkR0VpTEdaMWJtTjBhVzl1S0NrZ2V3b0pDUWwyYVdSbGJ5NXdiR0Y1S0NrN0Nna0pmU2s3Q2dsOUNuMDdDa2hzYzBwekxtVjRjRzl6WlY5d2JHRjVaWElnUFNCbWRXNWpkR2x2Ymlod0tTQjdDZ2wzYVc1a2IzY3VjR3hoZVdWeUlEMGdjRHNLQ1hKbGRIVnliaUJ3T3dwOU93cEliSE5LY3k1d2NtOTBiM1I1Y0dVZ1BTQjdDZ2xmWDJOc1lYTnpYMTg2SUVoc2MwcHpDbjA3Q25aaGNpQkllRTkyWlhKeWFXUmxjeUE5SUdaMWJtTjBhVzl1S0NrZ2V5QjlPd29rYUhoRGJHRnpjMlZ6V3lKSWVFOTJaWEp5YVdSbGN5SmRJRDBnU0hoUGRtVnljbWxrWlhNN0NraDRUM1psY25KcFpHVnpMbDlmYm1GdFpWOWZJRDBnZEhKMVpUc0tTSGhQZG1WeWNtbGtaWE11YzNSeVJHRjBaU0E5SUdaMWJtTjBhVzl1S0hNcElIc0tDWFpoY2lCZlp5QTlJSE11YkdWdVozUm9Pd29KYzNkcGRHTm9LRjluS1NCN0NnbGpZWE5sSURnNkNna0pkbUZ5SUdzZ1BTQnpMbk53YkdsMEtDSTZJaWs3Q2drSmRtRnlJR1FnUFNCdVpYY2dSR0YwWlNncE93b0pDV1JiSW5ObGRGUnBiV1VpWFNnd0tUc0tDUWxrV3lKelpYUlZWRU5JYjNWeWN5SmRLR3RiTUYwcE93b0pDV1JiSW5ObGRGVlVRMDFwYm5WMFpYTWlYU2hyV3pGZEtUc0tDUWxrV3lKelpYUlZWRU5UWldOdmJtUnpJbDBvYTFzeVhTazdDZ2tKY21WMGRYSnVJR1E3Q2dsallYTmxJREV3T2dvSkNYWmhjaUJyTVNBOUlITXVjM0JzYVhRb0lpMGlLVHNLQ1FseVpYUjFjbTRnYm1WM0lFUmhkR1VvYXpGYk1GMHNhekZiTVYwZ0xTQXhMR3N4V3pKZExEQXNNQ3d3S1RzS0NXTmhjMlVnTVRrNkNna0pkbUZ5SUdzeUlEMGdjeTV6Y0d4cGRDZ2lJQ0lwT3dvSkNYWmhjaUI1SUQwZ2F6SmJNRjB1YzNCc2FYUW9JaTBpS1RzS0NRbDJZWElnZENBOUlHc3lXekZkTG5Od2JHbDBLQ0k2SWlrN0Nna0pjbVYwZFhKdUlHNWxkeUJFWVhSbEtIbGJNRjBzZVZzeFhTQXRJREVzZVZzeVhTeDBXekJkTEhSYk1WMHNkRnN5WFNrN0NnbGtaV1poZFd4ME9nb0pDWFJvY205M0lHNWxkeUJxYzE5ZkpFSnZiM1JmU0dGNFpVVnljbTl5S0NKSmJuWmhiR2xrSUdSaGRHVWdabTl5YldGMElEb2dJaUFySUhNcE93b0pmUXA5T3dwSWVFOTJaWEp5YVdSbGN5NWpZMkVnUFNCbWRXNWpkR2x2YmloekxHbHVaR1Y0S1NCN0NnbDJZWElnZUNBOUlITXVZMmhoY2tOdlpHVkJkQ2hwYm1SbGVDazdDZ2xwWmloNElDRTlJSGdwSUhzS0NRbHlaWFIxY200Z2RXNWtaV1pwYm1Wa093b0pmUW9KY21WMGRYSnVJSGc3Q24wN0NraDRUM1psY25KcFpHVnpMbk4xWW5OMGNpQTlJR1oxYm1OMGFXOXVLSE1zY0c5ekxHeGxiaWtnZXdvSmFXWW9iR1Z1SUQwOUlHNTFiR3dwSUhzS0NRbHNaVzRnUFNCekxteGxibWQwYURzS0NYMGdaV3h6WlNCcFppaHNaVzRnUENBd0tTQjdDZ2tKYVdZb2NHOXpJRDA5SURBcElIc0tDUWtKYkdWdUlEMGdjeTVzWlc1bmRHZ2dLeUJzWlc0N0Nna0pmU0JsYkhObElIc0tDUWtKY21WMGRYSnVJQ0lpT3dvSkNYMEtDWDBLQ1hKbGRIVnliaUJ6TG5OMVluTjBjaWh3YjNNc2JHVnVLVHNLZlRzS1NIaFBkbVZ5Y21sa1pYTXVhWFJsY2lBOUlHWjFibU4wYVc5dUtHRXBJSHNLQ1hKbGRIVnliaUI3SUdOMWNpQTZJREFzSUdGeWNpQTZJR0VzSUdoaGMwNWxlSFFnT2lCbWRXNWpkR2x2YmlncElIc0tDUWx5WlhSMWNtNGdkR2hwY3k1amRYSWdQQ0IwYUdsekxtRnljaTVzWlc1bmRHZzdDZ2w5TENCdVpYaDBJRG9nWm5WdVkzUnBiMjRvS1NCN0Nna0pjbVYwZFhKdUlIUm9hWE11WVhKeVczUm9hWE11WTNWeUt5dGRPd29KZlgwN0NuMDdDblpoY2lCTWFYTjBJRDBnWm5WdVkzUnBiMjRvS1NCN0NnbDBhR2x6TG14bGJtZDBhQ0E5SURBN0NuMDdDaVJvZUVOc1lYTnpaWE5iSWt4cGMzUWlYU0E5SUV4cGMzUTdDa3hwYzNRdVgxOXVZVzFsWDE4Z1BTQjBjblZsT3dwTWFYTjBMbkJ5YjNSdmRIbHdaU0E5SUhzS0NXRmtaRG9nWm5WdVkzUnBiMjRvYVhSbGJTa2dld29KQ1haaGNpQjRJRDBnYm1WM0lGOGtUR2x6ZEY5TWFYTjBUbTlrWlNocGRHVnRMRzUxYkd3cE93b0pDV2xtS0hSb2FYTXVhQ0E5UFNCdWRXeHNLU0I3Q2drSkNYUm9hWE11YUNBOUlIZzdDZ2tKZlNCbGJITmxJSHNLQ1FrSmRHaHBjeTV4TG01bGVIUWdQU0I0T3dvSkNYMEtDUWwwYUdsekxuRWdQU0I0T3dvSkNYUm9hWE11YkdWdVozUm9LeXM3Q2dsOUNna3NYMTlqYkdGemMxOWZPaUJNYVhOMENuMDdDblpoY2lCZkpFeHBjM1JmVEdsemRFNXZaR1VnUFNCbWRXNWpkR2x2YmlocGRHVnRMRzVsZUhRcElIc0tDWFJvYVhNdWFYUmxiU0E5SUdsMFpXMDdDZ2wwYUdsekxtNWxlSFFnUFNCdVpYaDBPd3A5T3dva2FIaERiR0Z6YzJWeld5SmZUR2x6ZEM1TWFYTjBUbTlrWlNKZElEMGdYeVJNYVhOMFgweHBjM1JPYjJSbE93cGZKRXhwYzNSZlRHbHpkRTV2WkdVdVgxOXVZVzFsWDE4Z1BTQjBjblZsT3dwZkpFeHBjM1JmVEdsemRFNXZaR1V1Y0hKdmRHOTBlWEJsSUQwZ2V3b0pYMTlqYkdGemMxOWZPaUJmSkV4cGMzUmZUR2x6ZEU1dlpHVUtmVHNLVFdGMGFDNWZYMjVoYldWZlh5QTlJSFJ5ZFdVN0NuWmhjaUJTWldac1pXTjBJRDBnWm5WdVkzUnBiMjRvS1NCN0lIMDdDaVJvZUVOc1lYTnpaWE5iSWxKbFpteGxZM1FpWFNBOUlGSmxabXhsWTNRN0NsSmxabXhsWTNRdVgxOXVZVzFsWDE4Z1BTQjBjblZsT3dwU1pXWnNaV04wTG1acFpXeGtJRDBnWm5WdVkzUnBiMjRvYnl4bWFXVnNaQ2tnZXdvSmRISjVJSHNLQ1FseVpYUjFjbTRnYjF0bWFXVnNaRjA3Q2dsOUlHTmhkR05vS0NCbElDa2dld29KQ1hKbGRIVnliaUJ1ZFd4c093b0pmUXA5T3dwU1pXWnNaV04wTG1acFpXeGtjeUE5SUdaMWJtTjBhVzl1S0c4cElIc0tDWFpoY2lCaElEMGdXMTA3Q2dscFppaHZJQ0U5SUc1MWJHd3BJSHNLQ1FsMllYSWdhR0Z6VDNkdVVISnZjR1Z5ZEhrZ1BTQlBZbXBsWTNRdWNISnZkRzkwZVhCbExtaGhjMDkzYmxCeWIzQmxjblI1T3dvSkNXWnZjaWdnZG1GeUlHWWdhVzRnYnlBcElIc0tDUWxwWmlobUlDRTlJQ0pmWDJsa1gxOGlJQ1ltSUdZZ0lUMGdJbWg0WDE5amJHOXpkWEpsYzE5ZklpQW1KaUJvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0c4c1ppa3BJSHNLQ1FrSllTNXdkWE5vS0dZcE93b0pDWDBLQ1FsOUNnbDlDZ2x5WlhSMWNtNGdZVHNLZlRzS1VtVm1iR1ZqZEM1cGMwWjFibU4wYVc5dUlEMGdablZ1WTNScGIyNG9aaWtnZXdvSmFXWW9kSGx3Wlc5bUtHWXBJRDA5SUNKbWRXNWpkR2x2YmlJcElIc0tDUWx5WlhSMWNtNGdJU2htTGw5ZmJtRnRaVjlmSUh4OElHWXVYMTlsYm1GdFpWOWZLVHNLQ1gwZ1pXeHpaU0I3Q2drSmNtVjBkWEp1SUdaaGJITmxPd29KZlFwOU93cDJZWElnVTNSa0lEMGdablZ1WTNScGIyNG9LU0I3SUgwN0NpUm9lRU5zWVhOelpYTmJJbE4wWkNKZElEMGdVM1JrT3dwVGRHUXVYMTl1WVcxbFgxOGdQU0IwY25WbE93cFRkR1F1YzNSeWFXNW5JRDBnWm5WdVkzUnBiMjRvY3lrZ2V3b0pjbVYwZFhKdUlHcHpYMEp2YjNRdVgxOXpkSEpwYm1kZmNtVmpLSE1zSWlJcE93cDlPd3AyWVhJZ1ZIbHdaU0E5SUdaMWJtTjBhVzl1S0NrZ2V5QjlPd29rYUhoRGJHRnpjMlZ6V3lKVWVYQmxJbDBnUFNCVWVYQmxPd3BVZVhCbExsOWZibUZ0WlY5ZklEMGdkSEoxWlRzS1ZIbHdaUzV5WlhOdmJIWmxRMnhoYzNNZ1BTQm1kVzVqZEdsdmJpaHVZVzFsS1NCN0NnbDJZWElnWTJ3Z1BTQWthSGhEYkdGemMyVnpXMjVoYldWZE93b0phV1lvWTJ3Z1BUMGdiblZzYkNCOGZDQWhZMnd1WDE5dVlXMWxYMThwSUhzS0NRbHlaWFIxY200Z2JuVnNiRHNLQ1gwS0NYSmxkSFZ5YmlCamJEc0tmVHNLVkhsd1pTNXlaWE52YkhabFJXNTFiU0E5SUdaMWJtTjBhVzl1S0c1aGJXVXBJSHNLQ1haaGNpQmxJRDBnSkdoNFEyeGhjM05sYzF0dVlXMWxYVHNLQ1dsbUtHVWdQVDBnYm5Wc2JDQjhmQ0FoWlM1ZlgyVnVZVzFsWDE4cElIc0tDUWx5WlhSMWNtNGdiblZzYkRzS0NYMEtDWEpsZEhWeWJpQmxPd3A5T3dwVWVYQmxMbU55WldGMFpVVnRjSFI1U1c1emRHRnVZMlVnUFNCbWRXNWpkR2x2YmloamJDa2dld29KWm5WdVkzUnBiMjRnWlcxd2RIa29LU0I3ZlRzZ1pXMXdkSGt1Y0hKdmRHOTBlWEJsSUQwZ1kyd3VjSEp2ZEc5MGVYQmxPd29KY21WMGRYSnVJRzVsZHlCbGJYQjBlU2dwT3dwOU93cFVlWEJsTG1OeVpXRjBaVVZ1ZFcwZ1BTQm1kVzVqZEdsdmJpaGxMR052Ym5OMGNpeHdZWEpoYlhNcElIc0tDWFpoY2lCbUlEMGdVbVZtYkdWamRDNW1hV1ZzWkNobExHTnZibk4wY2lrN0NnbHBaaWhtSUQwOUlHNTFiR3dwSUhzS0NRbDBhSEp2ZHlCdVpYY2dhbk5mWHlSQ2IyOTBYMGhoZUdWRmNuSnZjaWdpVG04Z2MzVmphQ0JqYjI1emRISjFZM1J2Y2lBaUlDc2dZMjl1YzNSeUtUc0tDWDBLQ1dsbUtGSmxabXhsWTNRdWFYTkdkVzVqZEdsdmJpaG1LU2tnZXdvSkNXbG1LSEJoY21GdGN5QTlQU0J1ZFd4c0tTQjdDZ2tKQ1hSb2NtOTNJRzVsZHlCcWMxOWZKRUp2YjNSZlNHRjRaVVZ5Y205eUtDSkRiMjV6ZEhKMVkzUnZjaUFpSUNzZ1kyOXVjM1J5SUNzZ0lpQnVaV1ZrSUhCaGNtRnRaWFJsY25NaUtUc0tDUWw5Q2drSmNtVjBkWEp1SUdZdVlYQndiSGtvWlN4d1lYSmhiWE1wT3dvSmZRb0phV1lvY0dGeVlXMXpJQ0U5SUc1MWJHd2dKaVlnY0dGeVlXMXpMbXhsYm1kMGFDQWhQU0F3S1NCN0Nna0pkR2h5YjNjZ2JtVjNJR3B6WDE4a1FtOXZkRjlJWVhobFJYSnliM0lvSWtOdmJuTjBjblZqZEc5eUlDSWdLeUJqYjI1emRISWdLeUFpSUdSdlpYTWdibTkwSUc1bFpXUWdjR0Z5WVcxbGRHVnljeUlwT3dvSmZRb0pjbVYwZFhKdUlHWTdDbjA3Q25aaGNpQm9ZWGhsWDBsTllYQWdQU0JtZFc1amRHbHZiaWdwSUhzZ2ZUc0tKR2g0UTJ4aGMzTmxjMXNpYUdGNFpTNUpUV0Z3SWwwZ1BTQm9ZWGhsWDBsTllYQTdDbWhoZUdWZlNVMWhjQzVmWDI1aGJXVmZYeUE5SUhSeWRXVTdDblpoY2lCb1lYaGxYMUpsYzI5MWNtTmxJRDBnWm5WdVkzUnBiMjRvS1NCN0lIMDdDaVJvZUVOc1lYTnpaWE5iSW1oaGVHVXVVbVZ6YjNWeVkyVWlYU0E5SUdoaGVHVmZVbVZ6YjNWeVkyVTdDbWhoZUdWZlVtVnpiM1Z5WTJVdVgxOXVZVzFsWDE4Z1BTQjBjblZsT3dwb1lYaGxYMUpsYzI5MWNtTmxMbWRsZEZOMGNtbHVaeUE5SUdaMWJtTjBhVzl1S0c1aGJXVXBJSHNLQ1haaGNpQmZaeUE5SURBN0NnbDJZWElnWDJjeElEMGdhR0Y0WlY5U1pYTnZkWEpqWlM1amIyNTBaVzUwT3dvSmQyaHBiR1VvWDJjZ1BDQmZaekV1YkdWdVozUm9LU0I3Q2drSmRtRnlJSGdnUFNCZlp6RmJYMmRkT3dvSkNTc3JYMmM3Q2drSmFXWW9lQzV1WVcxbElEMDlJRzVoYldVcElIc0tDUWtKYVdZb2VDNXpkSElnSVQwZ2JuVnNiQ2tnZXdvSkNRa0pjbVYwZFhKdUlIZ3VjM1J5T3dvSkNRbDlDZ2tKQ1haaGNpQmlJRDBnYUdGNFpWOWpjbmx3ZEc5ZlFtRnpaVFkwTG1SbFkyOWtaU2g0TG1SaGRHRXBPd29KQ1FseVpYUjFjbTRnWWk1MGIxTjBjbWx1WnlncE93b0pDWDBLQ1gwS0NYSmxkSFZ5YmlCdWRXeHNPd3A5T3dwMllYSWdhR0Y0WlY5ZkpGVnVjMlZ5YVdGc2FYcGxjbDlFWldaaGRXeDBVbVZ6YjJ4MlpYSWdQU0JtZFc1amRHbHZiaWdwSUhzS2ZUc0tKR2g0UTJ4aGMzTmxjMXNpYUdGNFpTNWZWVzV6WlhKcFlXeHBlbVZ5TGtSbFptRjFiSFJTWlhOdmJIWmxjaUpkSUQwZ2FHRjRaVjlmSkZWdWMyVnlhV0ZzYVhwbGNsOUVaV1poZFd4MFVtVnpiMngyWlhJN0NtaGhlR1ZmWHlSVmJuTmxjbWxoYkdsNlpYSmZSR1ZtWVhWc2RGSmxjMjlzZG1WeUxsOWZibUZ0WlY5ZklEMGdkSEoxWlRzS2FHRjRaVjlmSkZWdWMyVnlhV0ZzYVhwbGNsOUVaV1poZFd4MFVtVnpiMngyWlhJdWNISnZkRzkwZVhCbElEMGdld29KY21WemIyeDJaVU5zWVhOek9pQm1kVzVqZEdsdmJpaHVZVzFsS1NCN0Nna0pjbVYwZFhKdUlGUjVjR1V1Y21WemIyeDJaVU5zWVhOektHNWhiV1VwT3dvSmZRb0pMSEpsYzI5c2RtVkZiblZ0T2lCbWRXNWpkR2x2YmlodVlXMWxLU0I3Q2drSmNtVjBkWEp1SUZSNWNHVXVjbVZ6YjJ4MlpVVnVkVzBvYm1GdFpTazdDZ2w5Q2drc1gxOWpiR0Z6YzE5Zk9pQm9ZWGhsWDE4a1ZXNXpaWEpwWVd4cGVtVnlYMFJsWm1GMWJIUlNaWE52YkhabGNncDlPd3AyWVhJZ2FHRjRaVjlWYm5ObGNtbGhiR2w2WlhJZ1BTQm1kVzVqZEdsdmJpaGlkV1lwSUhzS0NYUm9hWE11WW5WbUlEMGdZblZtT3dvSmRHaHBjeTVzWlc1bmRHZ2dQU0JpZFdZdWJHVnVaM1JvT3dvSmRHaHBjeTV3YjNNZ1BTQXdPd29KZEdocGN5NXpZMkZqYUdVZ1BTQmJYVHNLQ1hSb2FYTXVZMkZqYUdVZ1BTQmJYVHNLQ1haaGNpQnlJRDBnYUdGNFpWOVZibk5sY21saGJHbDZaWEl1UkVWR1FWVk1WRjlTUlZOUFRGWkZVanNLQ1dsbUtISWdQVDBnYm5Wc2JDa2dld29KQ1hJZ1BTQnVaWGNnYUdGNFpWOWZKRlZ1YzJWeWFXRnNhWHBsY2w5RVpXWmhkV3gwVW1WemIyeDJaWElvS1RzS0NRbG9ZWGhsWDFWdWMyVnlhV0ZzYVhwbGNpNUVSVVpCVlV4VVgxSkZVMDlNVmtWU0lEMGdjanNLQ1gwS0NYUm9hWE11Y21WemIyeDJaWElnUFNCeU93cDlPd29rYUhoRGJHRnpjMlZ6V3lKb1lYaGxMbFZ1YzJWeWFXRnNhWHBsY2lKZElEMGdhR0Y0WlY5VmJuTmxjbWxoYkdsNlpYSTdDbWhoZUdWZlZXNXpaWEpwWVd4cGVtVnlMbDlmYm1GdFpWOWZJRDBnZEhKMVpUc0thR0Y0WlY5VmJuTmxjbWxoYkdsNlpYSXVhVzVwZEVOdlpHVnpJRDBnWm5WdVkzUnBiMjRvS1NCN0NnbDJZWElnWTI5a1pYTWdQU0JiWFRzS0NYWmhjaUJmWnpFZ1BTQXdPd29KZG1GeUlGOW5JRDBnYUdGNFpWOVZibk5sY21saGJHbDZaWEl1UWtGVFJUWTBMbXhsYm1kMGFEc0tDWGRvYVd4bEtGOW5NU0E4SUY5bktTQjdDZ2tKZG1GeUlHa2dQU0JmWnpFckt6c0tDUWxqYjJSbGMxdG9ZWGhsWDFWdWMyVnlhV0ZzYVhwbGNpNUNRVk5GTmpRdVkyaGhja052WkdWQmRDaHBLVjBnUFNCcE93b0pmUW9KY21WMGRYSnVJR052WkdWek93cDlPd3BvWVhobFgxVnVjMlZ5YVdGc2FYcGxjaTV5ZFc0Z1BTQm1kVzVqZEdsdmJpaDJLU0I3Q2dseVpYUjFjbTRnYm1WM0lHaGhlR1ZmVlc1elpYSnBZV3hwZW1WeUtIWXBMblZ1YzJWeWFXRnNhWHBsS0NrN0NuMDdDbWhoZUdWZlZXNXpaWEpwWVd4cGVtVnlMbkJ5YjNSdmRIbHdaU0E5SUhzS0NYSmxZV1JFYVdkcGRITTZJR1oxYm1OMGFXOXVLQ2tnZXdvSkNYWmhjaUJySUQwZ01Ec0tDUWwyWVhJZ2N5QTlJR1poYkhObE93b0pDWFpoY2lCbWNHOXpJRDBnZEdocGN5NXdiM003Q2drSmQyaHBiR1VvZEhKMVpTa2dld29KQ1FsMllYSWdZeUE5SUhSb2FYTXVZblZtTG1Ob1lYSkRiMlJsUVhRb2RHaHBjeTV3YjNNcE93b0pDUWxwWmloaklDRTlJR01wSUhzS0NRa0pDV0p5WldGck93b0pDUWw5Q2drSkNXbG1LR01nUFQwZ05EVXBJSHNLQ1FrSkNXbG1LSFJvYVhNdWNHOXpJQ0U5SUdad2IzTXBJSHNLQ1FrSkNRbGljbVZoYXpzS0NRa0pDWDBLQ1FrSkNYTWdQU0IwY25WbE93b0pDUWtKZEdocGN5NXdiM01yS3pzS0NRa0pDV052Ym5ScGJuVmxPd29KQ1FsOUNna0pDV2xtS0dNZ1BDQTBPQ0I4ZkNCaklENGdOVGNwSUhzS0NRa0pDV0p5WldGck93b0pDUWw5Q2drSkNXc2dQU0JySUNvZ01UQWdLeUFvWXlBdElEUTRLVHNLQ1FrSmRHaHBjeTV3YjNNckt6c0tDUWw5Q2drSmFXWW9jeWtnZXdvSkNRbHJJQ285SUMweE93b0pDWDBLQ1FseVpYUjFjbTRnYXpzS0NYMEtDU3h5WldGa1JteHZZWFE2SUdaMWJtTjBhVzl1S0NrZ2V3b0pDWFpoY2lCd01TQTlJSFJvYVhNdWNHOXpPd29KQ1hkb2FXeGxLSFJ5ZFdVcElIc0tDUWtKZG1GeUlHTWdQU0IwYUdsekxtSjFaaTVqYUdGeVEyOWtaVUYwS0hSb2FYTXVjRzl6S1RzS0NRa0phV1lvWXlBaFBTQmpLU0I3Q2drSkNRbGljbVZoYXpzS0NRa0pmUW9KQ1FscFppaGpJRDQ5SURReklDWW1JR01nUENBMU9DQjhmQ0JqSUQwOUlERXdNU0I4ZkNCaklEMDlJRFk1S1NCN0Nna0pDUWwwYUdsekxuQnZjeXNyT3dvSkNRbDlJR1ZzYzJVZ2V3b0pDUWtKWW5KbFlXczdDZ2tKQ1gwS0NRbDlDZ2tKY21WMGRYSnVJSEJoY25ObFJteHZZWFFvU0hoUGRtVnljbWxrWlhNdWMzVmljM1J5S0hSb2FYTXVZblZtTEhBeExIUm9hWE11Y0c5eklDMGdjREVwS1RzS0NYMEtDU3gxYm5ObGNtbGhiR2w2WlU5aWFtVmpkRG9nWm5WdVkzUnBiMjRvYnlrZ2V3b0pDWGRvYVd4bEtIUnlkV1VwSUhzS0NRa0phV1lvZEdocGN5NXdiM01nUGowZ2RHaHBjeTVzWlc1bmRHZ3BJSHNLQ1FrSkNYUm9jbTkzSUc1bGR5QnFjMTlmSkVKdmIzUmZTR0Y0WlVWeWNtOXlLQ0pKYm5aaGJHbGtJRzlpYW1WamRDSXBPd29KQ1FsOUNna0pDV2xtS0hSb2FYTXVZblZtTG1Ob1lYSkRiMlJsUVhRb2RHaHBjeTV3YjNNcElEMDlJREV3TXlrZ2V3b0pDUWtKWW5KbFlXczdDZ2tKQ1gwS0NRa0pkbUZ5SUdzZ1BTQjBhR2x6TG5WdWMyVnlhV0ZzYVhwbEtDazdDZ2tKQ1dsbUtIUjVjR1Z2WmlocktTQWhQU0FpYzNSeWFXNW5JaWtnZXdvSkNRa0pkR2h5YjNjZ2JtVjNJR3B6WDE4a1FtOXZkRjlJWVhobFJYSnliM0lvSWtsdWRtRnNhV1FnYjJKcVpXTjBJR3RsZVNJcE93b0pDUWw5Q2drSkNYWmhjaUIySUQwZ2RHaHBjeTUxYm5ObGNtbGhiR2w2WlNncE93b0pDUWx2VzJ0ZElEMGdkanNLQ1FsOUNna0pkR2hwY3k1d2IzTXJLenNLQ1gwS0NTeDFibk5sY21saGJHbDZaVVZ1ZFcwNklHWjFibU4wYVc5dUtHVmtaV05zTEhSaFp5a2dld29KQ1dsbUtIUm9hWE11WW5WbUxtTm9ZWEpEYjJSbFFYUW9kR2hwY3k1d2IzTXJLeWtnSVQwZ05UZ3BJSHNLQ1FrSmRHaHliM2NnYm1WM0lHcHpYMThrUW05dmRGOUlZWGhsUlhKeWIzSW9Ja2x1ZG1Gc2FXUWdaVzUxYlNCbWIzSnRZWFFpS1RzS0NRbDlDZ2tKZG1GeUlHNWhjbWR6SUQwZ2RHaHBjeTV5WldGa1JHbG5hWFJ6S0NrN0Nna0phV1lvYm1GeVozTWdQVDBnTUNrZ2V3b0pDUWx5WlhSMWNtNGdWSGx3WlM1amNtVmhkR1ZGYm5WdEtHVmtaV05zTEhSaFp5azdDZ2tKZlFvSkNYWmhjaUJoY21keklEMGdXMTA3Q2drSmQyaHBiR1VvYm1GeVozTXRMU0ErSURBcElHRnlaM011Y0hWemFDaDBhR2x6TG5WdWMyVnlhV0ZzYVhwbEtDa3BPd29KQ1hKbGRIVnliaUJVZVhCbExtTnlaV0YwWlVWdWRXMG9aV1JsWTJ3c2RHRm5MR0Z5WjNNcE93b0pmUW9KTEhWdWMyVnlhV0ZzYVhwbE9pQm1kVzVqZEdsdmJpZ3BJSHNLQ1FsMllYSWdYMmNnUFNCMGFHbHpMbUoxWmk1amFHRnlRMjlrWlVGMEtIUm9hWE11Y0c5ekt5c3BPd29KQ1hOM2FYUmphQ2hmWnlrZ2V3b0pDV05oYzJVZ05qVTZDZ2tKQ1haaGNpQnVZVzFsSUQwZ2RHaHBjeTUxYm5ObGNtbGhiR2w2WlNncE93b0pDUWwyWVhJZ1kyd2dQU0IwYUdsekxuSmxjMjlzZG1WeUxuSmxjMjlzZG1WRGJHRnpjeWh1WVcxbEtUc0tDUWtKYVdZb1kyd2dQVDBnYm5Wc2JDa2dld29KQ1FrSmRHaHliM2NnYm1WM0lHcHpYMThrUW05dmRGOUlZWGhsUlhKeWIzSW9Ja05zWVhOeklHNXZkQ0JtYjNWdVpDQWlJQ3NnYm1GdFpTazdDZ2tKQ1gwS0NRa0pjbVYwZFhKdUlHTnNPd29KQ1dOaGMyVWdOalk2Q2drSkNYWmhjaUJ1WVcxbE1TQTlJSFJvYVhNdWRXNXpaWEpwWVd4cGVtVW9LVHNLQ1FrSmRtRnlJR1VnUFNCMGFHbHpMbkpsYzI5c2RtVnlMbkpsYzI5c2RtVkZiblZ0S0c1aGJXVXhLVHNLQ1FrSmFXWW9aU0E5UFNCdWRXeHNLU0I3Q2drSkNRbDBhSEp2ZHlCdVpYY2dhbk5mWHlSQ2IyOTBYMGhoZUdWRmNuSnZjaWdpUlc1MWJTQnViM1FnWm05MWJtUWdJaUFySUc1aGJXVXhLVHNLQ1FrSmZRb0pDUWx5WlhSMWNtNGdaVHNLQ1FsallYTmxJRFkzT2dvSkNRbDJZWElnYm1GdFpUSWdQU0IwYUdsekxuVnVjMlZ5YVdGc2FYcGxLQ2s3Q2drSkNYWmhjaUJqYkRFZ1BTQjBhR2x6TG5KbGMyOXNkbVZ5TG5KbGMyOXNkbVZEYkdGemN5aHVZVzFsTWlrN0Nna0pDV2xtS0dOc01TQTlQU0J1ZFd4c0tTQjdDZ2tKQ1FsMGFISnZkeUJ1WlhjZ2FuTmZYeVJDYjI5MFgwaGhlR1ZGY25KdmNpZ2lRMnhoYzNNZ2JtOTBJR1p2ZFc1a0lDSWdLeUJ1WVcxbE1pazdDZ2tKQ1gwS0NRa0pkbUZ5SUc4Z1BTQlVlWEJsTG1OeVpXRjBaVVZ0Y0hSNVNXNXpkR0Z1WTJVb1kyd3hLVHNLQ1FrSmRHaHBjeTVqWVdOb1pTNXdkWE5vS0c4cE93b0pDUWx2TG1oNFZXNXpaWEpwWVd4cGVtVW9kR2hwY3lrN0Nna0pDV2xtS0hSb2FYTXVZblZtTG1Ob1lYSkRiMlJsUVhRb2RHaHBjeTV3YjNNckt5a2dJVDBnTVRBektTQjdDZ2tKQ1FsMGFISnZkeUJ1WlhjZ2FuTmZYeVJDYjI5MFgwaGhlR1ZGY25KdmNpZ2lTVzUyWVd4cFpDQmpkWE4wYjIwZ1pHRjBZU0lwT3dvSkNRbDlDZ2tKQ1hKbGRIVnliaUJ2T3dvSkNXTmhjMlVnTnpjNkNna0pDWFpoY2lCb0lEMGdibVYzSUdoaGVHVmZaSE5mVDJKcVpXTjBUV0Z3S0NrN0Nna0pDWFJvYVhNdVkyRmphR1V1Y0hWemFDaG9LVHNLQ1FrSmRtRnlJR0oxWmlBOUlIUm9hWE11WW5WbU93b0pDUWwzYUdsc1pTaDBhR2x6TG1KMVppNWphR0Z5UTI5a1pVRjBLSFJvYVhNdWNHOXpLU0FoUFNBeE1EUXBJSHNLQ1FrSkNYWmhjaUJ6SUQwZ2RHaHBjeTUxYm5ObGNtbGhiR2w2WlNncE93b0pDUWtKYUM1elpYUW9jeXgwYUdsekxuVnVjMlZ5YVdGc2FYcGxLQ2twT3dvSkNRbDlDZ2tKQ1hSb2FYTXVjRzl6S3lzN0Nna0pDWEpsZEhWeWJpQm9Pd29KQ1dOaGMyVWdPREk2Q2drSkNYWmhjaUJ1SUQwZ2RHaHBjeTV5WldGa1JHbG5hWFJ6S0NrN0Nna0pDV2xtS0c0Z1BDQXdJSHg4SUc0Z1BqMGdkR2hwY3k1elkyRmphR1V1YkdWdVozUm9LU0I3Q2drSkNRbDBhSEp2ZHlCdVpYY2dhbk5mWHlSQ2IyOTBYMGhoZUdWRmNuSnZjaWdpU1c1MllXeHBaQ0J6ZEhKcGJtY2djbVZtWlhKbGJtTmxJaWs3Q2drSkNYMEtDUWtKY21WMGRYSnVJSFJvYVhNdWMyTmhZMmhsVzI1ZE93b0pDV05oYzJVZ09UYzZDZ2tKQ1haaGNpQmlkV1l4SUQwZ2RHaHBjeTVpZFdZN0Nna0pDWFpoY2lCaElEMGdXMTA3Q2drSkNYUm9hWE11WTJGamFHVXVjSFZ6YUNoaEtUc0tDUWtKZDJocGJHVW9kSEoxWlNrZ2V3b0pDUWtKZG1GeUlHTWdQU0IwYUdsekxtSjFaaTVqYUdGeVEyOWtaVUYwS0hSb2FYTXVjRzl6S1RzS0NRa0pDV2xtS0dNZ1BUMGdNVEEwS1NCN0Nna0pDUWtKZEdocGN5NXdiM01yS3pzS0NRa0pDUWxpY21WaGF6c0tDUWtKQ1gwS0NRa0pDV2xtS0dNZ1BUMGdNVEUzS1NCN0Nna0pDUWtKZEdocGN5NXdiM01yS3pzS0NRa0pDUWwyWVhJZ2JqRWdQU0IwYUdsekxuSmxZV1JFYVdkcGRITW9LVHNLQ1FrSkNRbGhXMkV1YkdWdVozUm9JQ3NnYmpFZ0xTQXhYU0E5SUc1MWJHdzdDZ2tKQ1FsOUlHVnNjMlVnZXdvSkNRa0pDV0V1Y0hWemFDaDBhR2x6TG5WdWMyVnlhV0ZzYVhwbEtDa3BPd29KQ1FrSmZRb0pDUWw5Q2drSkNYSmxkSFZ5YmlCaE93b0pDV05oYzJVZ09UZzZDZ2tKQ1haaGNpQm9NU0E5SUc1bGR5Qm9ZWGhsWDJSelgxTjBjbWx1WjAxaGNDZ3BPd29KQ1FsMGFHbHpMbU5oWTJobExuQjFjMmdvYURFcE93b0pDUWwyWVhJZ1luVm1NaUE5SUhSb2FYTXVZblZtT3dvSkNRbDNhR2xzWlNoMGFHbHpMbUoxWmk1amFHRnlRMjlrWlVGMEtIUm9hWE11Y0c5ektTQWhQU0F4TURRcElIc0tDUWtKQ1haaGNpQnpNU0E5SUhSb2FYTXVkVzV6WlhKcFlXeHBlbVVvS1RzS0NRa0pDWFpoY2lCMllXeDFaU0E5SUhSb2FYTXVkVzV6WlhKcFlXeHBlbVVvS1RzS0NRa0pDV2xtS0Y5ZmJXRndYM0psYzJWeWRtVmtXM014WFNBaFBTQnVkV3hzS1NCN0Nna0pDUWtKYURFdWMyVjBVbVZ6WlhKMlpXUW9jekVzZG1Gc2RXVXBPd29KQ1FrSmZTQmxiSE5sSUhzS0NRa0pDUWxvTVM1b1czTXhYU0E5SUhaaGJIVmxPd29KQ1FrSmZRb0pDUWw5Q2drSkNYUm9hWE11Y0c5ekt5czdDZ2tKQ1hKbGRIVnliaUJvTVRzS0NRbGpZWE5sSURrNU9nb0pDUWwyWVhJZ2JtRnRaVE1nUFNCMGFHbHpMblZ1YzJWeWFXRnNhWHBsS0NrN0Nna0pDWFpoY2lCamJESWdQU0IwYUdsekxuSmxjMjlzZG1WeUxuSmxjMjlzZG1WRGJHRnpjeWh1WVcxbE15azdDZ2tKQ1dsbUtHTnNNaUE5UFNCdWRXeHNLU0I3Q2drSkNRbDBhSEp2ZHlCdVpYY2dhbk5mWHlSQ2IyOTBYMGhoZUdWRmNuSnZjaWdpUTJ4aGMzTWdibTkwSUdadmRXNWtJQ0lnS3lCdVlXMWxNeWs3Q2drSkNYMEtDUWtKZG1GeUlHOHhJRDBnVkhsd1pTNWpjbVZoZEdWRmJYQjBlVWx1YzNSaGJtTmxLR05zTWlrN0Nna0pDWFJvYVhNdVkyRmphR1V1Y0hWemFDaHZNU2s3Q2drSkNYUm9hWE11ZFc1elpYSnBZV3hwZW1WUFltcGxZM1FvYnpFcE93b0pDUWx5WlhSMWNtNGdiekU3Q2drSlkyRnpaU0F4TURBNkNna0pDWEpsZEhWeWJpQjBhR2x6TG5KbFlXUkdiRzloZENncE93b0pDV05oYzJVZ01UQXlPZ29KQ1FseVpYUjFjbTRnWm1Gc2MyVTdDZ2tKWTJGelpTQXhNRFU2Q2drSkNYSmxkSFZ5YmlCMGFHbHpMbkpsWVdSRWFXZHBkSE1vS1RzS0NRbGpZWE5sSURFd05qb0tDUWtKZG1GeUlHNWhiV1UwSUQwZ2RHaHBjeTUxYm5ObGNtbGhiR2w2WlNncE93b0pDUWwyWVhJZ1pXUmxZMndnUFNCMGFHbHpMbkpsYzI5c2RtVnlMbkpsYzI5c2RtVkZiblZ0S0c1aGJXVTBLVHNLQ1FrSmFXWW9aV1JsWTJ3Z1BUMGdiblZzYkNrZ2V3b0pDUWtKZEdoeWIzY2dibVYzSUdwelgxOGtRbTl2ZEY5SVlYaGxSWEp5YjNJb0lrVnVkVzBnYm05MElHWnZkVzVrSUNJZ0t5QnVZVzFsTkNrN0Nna0pDWDBLQ1FrSmRHaHBjeTV3YjNNckt6c0tDUWtKZG1GeUlHbHVaR1Y0SUQwZ2RHaHBjeTV5WldGa1JHbG5hWFJ6S0NrN0Nna0pDWFpoY2lCMFlXY2dQU0JsWkdWamJDNWZYMk52Ym5OMGNuVmpkSE5mWHk1emJHbGpaU2dwVzJsdVpHVjRYVHNLQ1FrSmFXWW9kR0ZuSUQwOUlHNTFiR3dwSUhzS0NRa0pDWFJvY205M0lHNWxkeUJxYzE5ZkpFSnZiM1JmU0dGNFpVVnljbTl5S0NKVmJtdHViM2R1SUdWdWRXMGdhVzVrWlhnZ0lpQXJJRzVoYldVMElDc2dJa0FpSUNzZ2FXNWtaWGdwT3dvSkNRbDlDZ2tKQ1haaGNpQmxNU0E5SUhSb2FYTXVkVzV6WlhKcFlXeHBlbVZGYm5WdEtHVmtaV05zTEhSaFp5azdDZ2tKQ1hSb2FYTXVZMkZqYUdVdWNIVnphQ2hsTVNrN0Nna0pDWEpsZEhWeWJpQmxNVHNLQ1FsallYTmxJREV3TnpvS0NRa0pjbVYwZFhKdUlFNWhUanNLQ1FsallYTmxJREV3T0RvS0NRa0pkbUZ5SUd3Z1BTQnVaWGNnVEdsemRDZ3BPd29KQ1FsMGFHbHpMbU5oWTJobExuQjFjMmdvYkNrN0Nna0pDWFpoY2lCaWRXWXpJRDBnZEdocGN5NWlkV1k3Q2drSkNYZG9hV3hsS0hSb2FYTXVZblZtTG1Ob1lYSkRiMlJsUVhRb2RHaHBjeTV3YjNNcElDRTlJREV3TkNrZ2JDNWhaR1FvZEdocGN5NTFibk5sY21saGJHbDZaU2dwS1RzS0NRa0pkR2hwY3k1d2IzTXJLenNLQ1FrSmNtVjBkWEp1SUd3N0Nna0pZMkZ6WlNBeE1EazZDZ2tKQ1hKbGRIVnliaUF0U1c1bWFXNXBkSGs3Q2drSlkyRnpaU0F4TVRBNkNna0pDWEpsZEhWeWJpQnVkV3hzT3dvSkNXTmhjMlVnTVRFeE9nb0pDUWwyWVhJZ2J6SWdQU0I3SUgwN0Nna0pDWFJvYVhNdVkyRmphR1V1Y0hWemFDaHZNaWs3Q2drSkNYUm9hWE11ZFc1elpYSnBZV3hwZW1WUFltcGxZM1FvYnpJcE93b0pDUWx5WlhSMWNtNGdiekk3Q2drSlkyRnpaU0F4TVRJNkNna0pDWEpsZEhWeWJpQkpibVpwYm1sMGVUc0tDUWxqWVhObElERXhNem9LQ1FrSmRtRnlJR2d5SUQwZ2JtVjNJR2hoZUdWZlpITmZTVzUwVFdGd0tDazdDZ2tKQ1hSb2FYTXVZMkZqYUdVdWNIVnphQ2hvTWlrN0Nna0pDWFpoY2lCaWRXWTBJRDBnZEdocGN5NWlkV1k3Q2drSkNYWmhjaUJqTVNBOUlIUm9hWE11WW5WbUxtTm9ZWEpEYjJSbFFYUW9kR2hwY3k1d2IzTXJLeWs3Q2drSkNYZG9hV3hsS0dNeElEMDlJRFU0S1NCN0Nna0pDUWwyWVhJZ2FTQTlJSFJvYVhNdWNtVmhaRVJwWjJsMGN5Z3BPd29KQ1FrSmRtRnlJSFpoYkhWbE1TQTlJSFJvYVhNdWRXNXpaWEpwWVd4cGVtVW9LVHNLQ1FrSkNXZ3lMbWhiYVYwZ1BTQjJZV3gxWlRFN0Nna0pDUWxqTVNBOUlIUm9hWE11WW5WbUxtTm9ZWEpEYjJSbFFYUW9kR2hwY3k1d2IzTXJLeWs3Q2drSkNYMEtDUWtKYVdZb1l6RWdJVDBnTVRBMEtTQjdDZ2tKQ1FsMGFISnZkeUJ1WlhjZ2FuTmZYeVJDYjI5MFgwaGhlR1ZGY25KdmNpZ2lTVzUyWVd4cFpDQkpiblJOWVhBZ1ptOXliV0YwSWlrN0Nna0pDWDBLQ1FrSmNtVjBkWEp1SUdneU93b0pDV05oYzJVZ01URTBPZ29KQ1FsMllYSWdiaklnUFNCMGFHbHpMbkpsWVdSRWFXZHBkSE1vS1RzS0NRa0phV1lvYmpJZ1BDQXdJSHg4SUc0eUlENDlJSFJvYVhNdVkyRmphR1V1YkdWdVozUm9LU0I3Q2drSkNRbDBhSEp2ZHlCdVpYY2dhbk5mWHlSQ2IyOTBYMGhoZUdWRmNuSnZjaWdpU1c1MllXeHBaQ0J5WldabGNtVnVZMlVpS1RzS0NRa0pmUW9KQ1FseVpYUjFjbTRnZEdocGN5NWpZV05vWlZ0dU1sMDdDZ2tKWTJGelpTQXhNVFU2Q2drSkNYWmhjaUJzWlc0Z1BTQjBhR2x6TG5KbFlXUkVhV2RwZEhNb0tUc0tDUWtKZG1GeUlHSjFaalVnUFNCMGFHbHpMbUoxWmpzS0NRa0phV1lvZEdocGN5NWlkV1l1WTJoaGNrTnZaR1ZCZENoMGFHbHpMbkJ2Y3lzcktTQWhQU0ExT0NCOGZDQjBhR2x6TG14bGJtZDBhQ0F0SUhSb2FYTXVjRzl6SUR3Z2JHVnVLU0I3Q2drSkNRbDBhSEp2ZHlCdVpYY2dhbk5mWHlSQ2IyOTBYMGhoZUdWRmNuSnZjaWdpU1c1MllXeHBaQ0JpZVhSbGN5QnNaVzVuZEdnaUtUc0tDUWtKZlFvSkNRbDJZWElnWTI5a1pYTWdQU0JvWVhobFgxVnVjMlZ5YVdGc2FYcGxjaTVEVDBSRlV6c0tDUWtKYVdZb1kyOWtaWE1nUFQwZ2JuVnNiQ2tnZXdvSkNRa0pZMjlrWlhNZ1BTQm9ZWGhsWDFWdWMyVnlhV0ZzYVhwbGNpNXBibWwwUTI5a1pYTW9LVHNLQ1FrSkNXaGhlR1ZmVlc1elpYSnBZV3hwZW1WeUxrTlBSRVZUSUQwZ1kyOWtaWE03Q2drSkNYMEtDUWtKZG1GeUlHa3hJRDBnZEdocGN5NXdiM003Q2drSkNYWmhjaUJ5WlhOMElEMGdiR1Z1SUNZZ016c0tDUWtKZG1GeUlITnBlbVVnUFNBb2JHVnVJRDQrSURJcElDb2dNeUFySUNoeVpYTjBJRDQ5SURJZ1B5QnlaWE4wSUMwZ01TQTZJREFwT3dvSkNRbDJZWElnYldGNElEMGdhVEVnS3lBb2JHVnVJQzBnY21WemRDazdDZ2tKQ1haaGNpQmllWFJsY3lBOUlHNWxkeUJvWVhobFgybHZYMEo1ZEdWektHNWxkeUJCY25KaGVVSjFabVpsY2loemFYcGxLU2s3Q2drSkNYWmhjaUJpY0c5eklEMGdNRHNLQ1FrSmQyaHBiR1VvYVRFZ1BDQnRZWGdwSUhzS0NRa0pDWFpoY2lCak1URWdQU0JqYjJSbGMxdGlkV1kxTG1Ob1lYSkRiMlJsUVhRb2FURXJLeWxkT3dvSkNRa0pkbUZ5SUdNeUlEMGdZMjlrWlhOYlluVm1OUzVqYUdGeVEyOWtaVUYwS0dreEt5c3BYVHNLQ1FrSkNXSjVkR1Z6TG1KYlluQnZjeXNyWFNBOUlDaGpNVEVnUER3Z01pQjhJR015SUQ0K0lEUXBJQ1lnTWpVMU93b0pDUWtKZG1GeUlHTXpJRDBnWTI5a1pYTmJZblZtTlM1amFHRnlRMjlrWlVGMEtHa3hLeXNwWFRzS0NRa0pDV0o1ZEdWekxtSmJZbkJ2Y3lzclhTQTlJQ2hqTWlBOFBDQTBJSHdnWXpNZ1BqNGdNaWtnSmlBeU5UVTdDZ2tKQ1FsMllYSWdZelFnUFNCamIyUmxjMXRpZFdZMUxtTm9ZWEpEYjJSbFFYUW9hVEVyS3lsZE93b0pDUWtKWW5sMFpYTXVZbHRpY0c5ekt5dGRJRDBnS0dNeklEdzhJRFlnZkNCak5Da2dKaUF5TlRVN0Nna0pDWDBLQ1FrSmFXWW9jbVZ6ZENBK1BTQXlLU0I3Q2drSkNRbDJZWElnWXpFeUlEMGdZMjlrWlhOYlluVm1OUzVqYUdGeVEyOWtaVUYwS0dreEt5c3BYVHNLQ1FrSkNYWmhjaUJqTWpFZ1BTQmpiMlJsYzF0aWRXWTFMbU5vWVhKRGIyUmxRWFFvYVRFckt5bGRPd29KQ1FrSllubDBaWE11WWx0aWNHOXpLeXRkSUQwZ0tHTXhNaUE4UENBeUlId2dZekl4SUQ0K0lEUXBJQ1lnTWpVMU93b0pDUWtKYVdZb2NtVnpkQ0E5UFNBektTQjdDZ2tKQ1FrSmRtRnlJR016TVNBOUlHTnZaR1Z6VzJKMVpqVXVZMmhoY2tOdlpHVkJkQ2hwTVNzcktWMDdDZ2tKQ1FrSllubDBaWE11WWx0aWNHOXpLeXRkSUQwZ0tHTXlNU0E4UENBMElId2dZek14SUQ0K0lESXBJQ1lnTWpVMU93b0pDUWtKZlFvSkNRbDlDZ2tKQ1hSb2FYTXVjRzl6SUNzOUlHeGxianNLQ1FrSmRHaHBjeTVqWVdOb1pTNXdkWE5vS0dKNWRHVnpLVHNLQ1FrSmNtVjBkWEp1SUdKNWRHVnpPd29KQ1dOaGMyVWdNVEUyT2dvSkNRbHlaWFIxY200Z2RISjFaVHNLQ1FsallYTmxJREV4T0RvS0NRa0pkbUZ5SUdRN0Nna0pDV2xtS0hSb2FYTXVZblZtTG1Ob1lYSkRiMlJsUVhRb2RHaHBjeTV3YjNNcElENDlJRFE0SUNZbUlIUm9hWE11WW5WbUxtTm9ZWEpEYjJSbFFYUW9kR2hwY3k1d2IzTXBJRHc5SURVM0lDWW1JSFJvYVhNdVluVm1MbU5vWVhKRGIyUmxRWFFvZEdocGN5NXdiM01nS3lBeEtTQStQU0EwT0NBbUppQjBhR2x6TG1KMVppNWphR0Z5UTI5a1pVRjBLSFJvYVhNdWNHOXpJQ3NnTVNrZ1BEMGdOVGNnSmlZZ2RHaHBjeTVpZFdZdVkyaGhja052WkdWQmRDaDBhR2x6TG5CdmN5QXJJRElwSUQ0OUlEUTRJQ1ltSUhSb2FYTXVZblZtTG1Ob1lYSkRiMlJsUVhRb2RHaHBjeTV3YjNNZ0t5QXlLU0E4UFNBMU55QW1KaUIwYUdsekxtSjFaaTVqYUdGeVEyOWtaVUYwS0hSb2FYTXVjRzl6SUNzZ015a2dQajBnTkRnZ0ppWWdkR2hwY3k1aWRXWXVZMmhoY2tOdlpHVkJkQ2gwYUdsekxuQnZjeUFySURNcElEdzlJRFUzSUNZbUlIUm9hWE11WW5WbUxtTm9ZWEpEYjJSbFFYUW9kR2hwY3k1d2IzTWdLeUEwS1NBOVBTQTBOU2tnZXdvSkNRa0paQ0E5SUVoNFQzWmxjbkpwWkdWekxuTjBja1JoZEdVb1NIaFBkbVZ5Y21sa1pYTXVjM1ZpYzNSeUtIUm9hWE11WW5WbUxIUm9hWE11Y0c5ekxERTVLU2s3Q2drSkNRbDBhR2x6TG5CdmN5QXJQU0F4T1RzS0NRa0pmU0JsYkhObElIc0tDUWtKQ1haaGNpQjBJRDBnZEdocGN5NXlaV0ZrUm14dllYUW9LVHNLQ1FrSkNXUWdQU0J1WlhjZ1JHRjBaU2gwS1RzS0NRa0pmUW9KQ1FsMGFHbHpMbU5oWTJobExuQjFjMmdvWkNrN0Nna0pDWEpsZEhWeWJpQmtPd29KQ1dOaGMyVWdNVEU1T2dvSkNRbDJZWElnYm1GdFpUVWdQU0IwYUdsekxuVnVjMlZ5YVdGc2FYcGxLQ2s3Q2drSkNYWmhjaUJsWkdWamJERWdQU0IwYUdsekxuSmxjMjlzZG1WeUxuSmxjMjlzZG1WRmJuVnRLRzVoYldVMUtUc0tDUWtKYVdZb1pXUmxZMnd4SUQwOUlHNTFiR3dwSUhzS0NRa0pDWFJvY205M0lHNWxkeUJxYzE5ZkpFSnZiM1JmU0dGNFpVVnljbTl5S0NKRmJuVnRJRzV2ZENCbWIzVnVaQ0FpSUNzZ2JtRnRaVFVwT3dvSkNRbDlDZ2tKQ1haaGNpQmxNaUE5SUhSb2FYTXVkVzV6WlhKcFlXeHBlbVZGYm5WdEtHVmtaV05zTVN4MGFHbHpMblZ1YzJWeWFXRnNhWHBsS0NrcE93b0pDUWwwYUdsekxtTmhZMmhsTG5CMWMyZ29aVElwT3dvSkNRbHlaWFIxY200Z1pUSTdDZ2tKWTJGelpTQXhNakE2Q2drSkNYUm9jbTkzSUdwelgxOGtRbTl2ZEY5SVlYaGxSWEp5YjNJdWQzSmhjQ2gwYUdsekxuVnVjMlZ5YVdGc2FYcGxLQ2twT3dvSkNRbGljbVZoYXpzS0NRbGpZWE5sSURFeU1Ub0tDUWtKZG1GeUlHeGxiakVnUFNCMGFHbHpMbkpsWVdSRWFXZHBkSE1vS1RzS0NRa0phV1lvZEdocGN5NWlkV1l1WTJoaGNrTnZaR1ZCZENoMGFHbHpMbkJ2Y3lzcktTQWhQU0ExT0NCOGZDQjBhR2x6TG14bGJtZDBhQ0F0SUhSb2FYTXVjRzl6SUR3Z2JHVnVNU2tnZXdvSkNRa0pkR2h5YjNjZ2JtVjNJR3B6WDE4a1FtOXZkRjlJWVhobFJYSnliM0lvSWtsdWRtRnNhV1FnYzNSeWFXNW5JR3hsYm1kMGFDSXBPd29KQ1FsOUNna0pDWFpoY2lCek1pQTlJRWg0VDNabGNuSnBaR1Z6TG5OMVluTjBjaWgwYUdsekxtSjFaaXgwYUdsekxuQnZjeXhzWlc0eEtUc0tDUWtKZEdocGN5NXdiM01nS3owZ2JHVnVNVHNLQ1FrSmN6SWdQU0JrWldOdlpHVlZVa2xEYjIxd2IyNWxiblFvY3pJdWMzQnNhWFFvSWlzaUtTNXFiMmx1S0NJZ0lpa3BPd29KQ1FsMGFHbHpMbk5qWVdOb1pTNXdkWE5vS0hNeUtUc0tDUWtKY21WMGRYSnVJSE15T3dvSkNXTmhjMlVnTVRJeU9nb0pDUWx5WlhSMWNtNGdNRHNLQ1Fsa1pXWmhkV3gwT2dvSkNYMEtDUWwwYUdsekxuQnZjeTB0T3dvSkNYUm9jbTkzSUc1bGR5QnFjMTlmSkVKdmIzUmZTR0Y0WlVWeWNtOXlLQ0pKYm5aaGJHbGtJR05vWVhJZ0lpQXJJSFJvYVhNdVluVm1MbU5vWVhKQmRDaDBhR2x6TG5CdmN5a2dLeUFpSUdGMElIQnZjMmwwYVc5dUlDSWdLeUIwYUdsekxuQnZjeWs3Q2dsOUNna3NYMTlqYkdGemMxOWZPaUJvWVhobFgxVnVjMlZ5YVdGc2FYcGxjZ3A5T3dwMllYSWdhR0Y0WlY5cGIxOUNlWFJsY3lBOUlHWjFibU4wYVc5dUtHUmhkR0VwSUhzS0NYUm9hWE11YkdWdVozUm9JRDBnWkdGMFlTNWllWFJsVEdWdVozUm9Pd29KZEdocGN5NWlJRDBnYm1WM0lGVnBiblE0UVhKeVlYa29aR0YwWVNrN0NnbDBhR2x6TG1JdVluVm1abVZ5Vm1Gc2RXVWdQU0JrWVhSaE93b0paR0YwWVM1b2VFSjVkR1Z6SUQwZ2RHaHBjenNLQ1dSaGRHRXVZbmwwWlhNZ1BTQjBhR2x6TG1JN0NuMDdDaVJvZUVOc1lYTnpaWE5iSW1oaGVHVXVhVzh1UW5sMFpYTWlYU0E5SUdoaGVHVmZhVzlmUW5sMFpYTTdDbWhoZUdWZmFXOWZRbmwwWlhNdVgxOXVZVzFsWDE4Z1BTQjBjblZsT3dwb1lYaGxYMmx2WDBKNWRHVnpMbTltVTNSeWFXNW5JRDBnWm5WdVkzUnBiMjRvY3lrZ2V3b0pkbUZ5SUdFZ1BTQmJYVHNLQ1haaGNpQnBJRDBnTURzS0NYZG9hV3hsS0drZ1BDQnpMbXhsYm1kMGFDa2dld29KQ1haaGNpQmpJRDBnY3k1amFHRnlRMjlrWlVGMEtHa3JLeWs3Q2drSmFXWW9OVFV5T1RZZ1BEMGdZeUFtSmlCaklEdzlJRFUyTXpFNUtTQjdDZ2tKQ1dNZ1BTQmpJQzBnTlRVeU16SWdQRHdnTVRBZ2ZDQnpMbU5vWVhKRGIyUmxRWFFvYVNzcktTQW1JREV3TWpNN0Nna0pmUW9KQ1dsbUtHTWdQRDBnTVRJM0tTQjdDZ2tKQ1dFdWNIVnphQ2hqS1RzS0NRbDlJR1ZzYzJVZ2FXWW9ZeUE4UFNBeU1EUTNLU0I3Q2drSkNXRXVjSFZ6YUNneE9USWdmQ0JqSUQ0K0lEWXBPd29KQ1FsaExuQjFjMmdvTVRJNElId2dZeUFtSURZektUc0tDUWw5SUdWc2MyVWdhV1lvWXlBOFBTQTJOVFV6TlNrZ2V3b0pDUWxoTG5CMWMyZ29NakkwSUh3Z1l5QStQaUF4TWlrN0Nna0pDV0V1Y0hWemFDZ3hNamdnZkNCaklENCtJRFlnSmlBMk15azdDZ2tKQ1dFdWNIVnphQ2d4TWpnZ2ZDQmpJQ1lnTmpNcE93b0pDWDBnWld4elpTQjdDZ2tKQ1dFdWNIVnphQ2d5TkRBZ2ZDQmpJRDQrSURFNEtUc0tDUWtKWVM1d2RYTm9LREV5T0NCOElHTWdQajRnTVRJZ0ppQTJNeWs3Q2drSkNXRXVjSFZ6YUNneE1qZ2dmQ0JqSUQ0K0lEWWdKaUEyTXlrN0Nna0pDV0V1Y0hWemFDZ3hNamdnZkNCaklDWWdOak1wT3dvSkNYMEtDWDBLQ1hKbGRIVnliaUJ1WlhjZ2FHRjRaVjlwYjE5Q2VYUmxjeWh1WlhjZ1ZXbHVkRGhCY25KaGVTaGhLUzVpZFdabVpYSXBPd3A5T3dwb1lYaGxYMmx2WDBKNWRHVnpMbkJ5YjNSdmRIbHdaU0E5SUhzS0NXZGxkRk4wY21sdVp6b2dablZ1WTNScGIyNG9jRzl6TEd4bGJpa2dld29KQ1dsbUtIQnZjeUE4SURBZ2ZId2diR1Z1SUR3Z01DQjhmQ0J3YjNNZ0t5QnNaVzRnUGlCMGFHbHpMbXhsYm1kMGFDa2dld29KQ1FsMGFISnZkeUJ1WlhjZ2FuTmZYeVJDYjI5MFgwaGhlR1ZGY25KdmNpaG9ZWGhsWDJsdlgwVnljbTl5TGs5MWRITnBaR1ZDYjNWdVpITXBPd29KQ1gwS0NRbDJZWElnY3lBOUlDSWlPd29KQ1haaGNpQmlJRDBnZEdocGN5NWlPd29KQ1haaGNpQm1ZMk1nUFNCVGRISnBibWN1Wm5KdmJVTm9ZWEpEYjJSbE93b0pDWFpoY2lCcElEMGdjRzl6T3dvSkNYWmhjaUJ0WVhnZ1BTQndiM01nS3lCc1pXNDdDZ2tKZDJocGJHVW9hU0E4SUcxaGVDa2dld29KQ1FsMllYSWdZeUE5SUdKYmFTc3JYVHNLQ1FrSmFXWW9ZeUE4SURFeU9Da2dld29KQ1FrSmFXWW9ZeUE5UFNBd0tTQjdDZ2tKQ1FrSlluSmxZV3M3Q2drSkNRbDlDZ2tKQ1FseklDczlJR1pqWXloaktUc0tDUWtKZlNCbGJITmxJR2xtS0dNZ1BDQXlNalFwSUhzS0NRa0pDWE1nS3owZ1ptTmpLQ2hqSUNZZ05qTXBJRHc4SURZZ2ZDQmlXMmtySzEwZ0ppQXhNamNwT3dvSkNRbDlJR1ZzYzJVZ2FXWW9ZeUE4SURJME1Da2dld29KQ1FrSmRtRnlJR015SUQwZ1lsdHBLeXRkT3dvSkNRa0pjeUFyUFNCbVkyTW9LR01nSmlBek1Ta2dQRHdnTVRJZ2ZDQW9ZeklnSmlBeE1qY3BJRHc4SURZZ2ZDQmlXMmtySzEwZ0ppQXhNamNwT3dvSkNRbDlJR1ZzYzJVZ2V3b0pDUWtKZG1GeUlHTXlNU0E5SUdKYmFTc3JYVHNLQ1FrSkNYWmhjaUJqTXlBOUlHSmJhU3NyWFRzS0NRa0pDWFpoY2lCMUlEMGdLR01nSmlBeE5Ta2dQRHdnTVRnZ2ZDQW9Zekl4SUNZZ01USTNLU0E4UENBeE1pQjhJQ2hqTXlBbUlERXlOeWtnUER3Z05pQjhJR0piYVNzclhTQW1JREV5TnpzS0NRa0pDWE1nS3owZ1ptTmpLQ2gxSUQ0K0lERXdLU0FySURVMU1qTXlLVHNLQ1FrSkNYTWdLejBnWm1OaktIVWdKaUF4TURJeklId2dOVFl6TWpBcE93b0pDUWw5Q2drSmZRb0pDWEpsZEhWeWJpQnpPd29KZlFvSkxIUnZVM1J5YVc1bk9pQm1kVzVqZEdsdmJpZ3BJSHNLQ1FseVpYUjFjbTRnZEdocGN5NW5aWFJUZEhKcGJtY29NQ3gwYUdsekxteGxibWQwYUNrN0NnbDlDZ2tzWDE5amJHRnpjMTlmT2lCb1lYaGxYMmx2WDBKNWRHVnpDbjA3Q25aaGNpQm9ZWGhsWDJOeWVYQjBiMTlDWVhObE5qUWdQU0JtZFc1amRHbHZiaWdwSUhzZ2ZUc0tKR2g0UTJ4aGMzTmxjMXNpYUdGNFpTNWpjbmx3ZEc4dVFtRnpaVFkwSWwwZ1BTQm9ZWGhsWDJOeWVYQjBiMTlDWVhObE5qUTdDbWhoZUdWZlkzSjVjSFJ2WDBKaGMyVTJOQzVmWDI1aGJXVmZYeUE5SUhSeWRXVTdDbWhoZUdWZlkzSjVjSFJ2WDBKaGMyVTJOQzVrWldOdlpHVWdQU0JtZFc1amRHbHZiaWh6ZEhJc1kyOXRjR3hsYldWdWRDa2dld29KYVdZb1kyOXRjR3hsYldWdWRDQTlQU0J1ZFd4c0tTQjdDZ2tKWTI5dGNHeGxiV1Z1ZENBOUlIUnlkV1U3Q2dsOUNnbHBaaWhqYjIxd2JHVnRaVzUwS1NCN0Nna0pkMmhwYkdVb1NIaFBkbVZ5Y21sa1pYTXVZMk5oS0hOMGNpeHpkSEl1YkdWdVozUm9JQzBnTVNrZ1BUMGdOakVwSUhOMGNpQTlJRWg0VDNabGNuSnBaR1Z6TG5OMVluTjBjaWh6ZEhJc01Dd3RNU2s3Q2dsOUNnbHlaWFIxY200Z2JtVjNJR2hoZUdWZlkzSjVjSFJ2WDBKaGMyVkRiMlJsS0doaGVHVmZZM0o1Y0hSdlgwSmhjMlUyTkM1Q1dWUkZVeWt1WkdWamIyUmxRbmwwWlhNb2FHRjRaVjlwYjE5Q2VYUmxjeTV2WmxOMGNtbHVaeWh6ZEhJcEtUc0tmVHNLZG1GeUlHaGhlR1ZmWTNKNWNIUnZYMEpoYzJWRGIyUmxJRDBnWm5WdVkzUnBiMjRvWW1GelpTa2dld29KZG1GeUlHeGxiaUE5SUdKaGMyVXViR1Z1WjNSb093b0pkbUZ5SUc1aWFYUnpJRDBnTVRzS0NYZG9hV3hsS0d4bGJpQStJREVnUER3Z2JtSnBkSE1wSUNzcmJtSnBkSE03Q2dscFppaHVZbWwwY3lBK0lEZ2dmSHdnYkdWdUlDRTlJREVnUER3Z2JtSnBkSE1wSUhzS0NRbDBhSEp2ZHlCdVpYY2dhbk5mWHlSQ2IyOTBYMGhoZUdWRmNuSnZjaWdpUW1GelpVTnZaR1VnT2lCaVlYTmxJR3hsYm1kMGFDQnRkWE4wSUdKbElHRWdjRzkzWlhJZ2IyWWdkSGR2TGlJcE93b0pmUW9KZEdocGN5NWlZWE5sSUQwZ1ltRnpaVHNLQ1hSb2FYTXVibUpwZEhNZ1BTQnVZbWwwY3pzS2ZUc0tKR2g0UTJ4aGMzTmxjMXNpYUdGNFpTNWpjbmx3ZEc4dVFtRnpaVU52WkdVaVhTQTlJR2hoZUdWZlkzSjVjSFJ2WDBKaGMyVkRiMlJsT3dwb1lYaGxYMk55ZVhCMGIxOUNZWE5sUTI5a1pTNWZYMjVoYldWZlh5QTlJSFJ5ZFdVN0NtaGhlR1ZmWTNKNWNIUnZYMEpoYzJWRGIyUmxMbkJ5YjNSdmRIbHdaU0E5SUhzS0NXbHVhWFJVWVdKc1pUb2dablZ1WTNScGIyNG9LU0I3Q2drSmRtRnlJSFJpYkNBOUlGdGRPd29KQ1haaGNpQmZaeUE5SURBN0Nna0pkMmhwYkdVb1gyY2dQQ0F5TlRZcElIc0tDUWtKZG1GeUlHa2dQU0JmWnlzck93b0pDUWwwWW14YmFWMGdQU0F0TVRzS0NRbDlDZ2tKZG1GeUlGOW5NU0E5SURBN0Nna0pkbUZ5SUY5bk1pQTlJSFJvYVhNdVltRnpaUzVzWlc1bmRHZzdDZ2tKZDJocGJHVW9YMmN4SUR3Z1gyY3lLU0I3Q2drSkNYWmhjaUJwTVNBOUlGOW5NU3NyT3dvSkNRbDBZbXhiZEdocGN5NWlZWE5sTG1KYmFURmRYU0E5SUdreE93b0pDWDBLQ1FsMGFHbHpMblJpYkNBOUlIUmliRHNLQ1gwS0NTeGtaV052WkdWQ2VYUmxjem9nWm5WdVkzUnBiMjRvWWlrZ2V3b0pDWFpoY2lCdVltbDBjeUE5SUhSb2FYTXVibUpwZEhNN0Nna0pkbUZ5SUdKaGMyVWdQU0IwYUdsekxtSmhjMlU3Q2drSmFXWW9kR2hwY3k1MFltd2dQVDBnYm5Wc2JDa2dld29KQ1FsMGFHbHpMbWx1YVhSVVlXSnNaU2dwT3dvSkNYMEtDUWwyWVhJZ2RHSnNJRDBnZEdocGN5NTBZbXc3Q2drSmRtRnlJSE5wZW1VZ1BTQmlMbXhsYm1kMGFDQXFJRzVpYVhSeklENCtJRE03Q2drSmRtRnlJRzkxZENBOUlHNWxkeUJvWVhobFgybHZYMEo1ZEdWektHNWxkeUJCY25KaGVVSjFabVpsY2loemFYcGxLU2s3Q2drSmRtRnlJR0oxWmlBOUlEQTdDZ2tKZG1GeUlHTjFjbUpwZEhNZ1BTQXdPd29KQ1haaGNpQndhVzRnUFNBd093b0pDWFpoY2lCd2IzVjBJRDBnTURzS0NRbDNhR2xzWlNod2IzVjBJRHdnYzJsNlpTa2dld29KQ1FsM2FHbHNaU2hqZFhKaWFYUnpJRHdnT0NrZ2V3b0pDUWtKWTNWeVltbDBjeUFyUFNCdVltbDBjenNLQ1FrSkNXSjFaaUE4UEQwZ2JtSnBkSE03Q2drSkNRbDJZWElnYVNBOUlIUmliRnRpTG1KYmNHbHVLeXRkWFRzS0NRa0pDV2xtS0drZ1BUMGdMVEVwSUhzS0NRa0pDUWwwYUhKdmR5QnVaWGNnYW5OZlh5UkNiMjkwWDBoaGVHVkZjbkp2Y2lnaVFtRnpaVU52WkdVZ09pQnBiblpoYkdsa0lHVnVZMjlrWldRZ1kyaGhjaUlwT3dvSkNRa0pmUW9KQ1FrSlluVm1JSHc5SUdrN0Nna0pDWDBLQ1FrSlkzVnlZbWwwY3lBdFBTQTRPd29KQ1FsdmRYUXVZbHR3YjNWMEt5dGRJRDBnWW5WbUlENCtJR04xY21KcGRITWdKaUF5TlRVZ0ppQXlOVFU3Q2drSmZRb0pDWEpsZEhWeWJpQnZkWFE3Q2dsOUNna3NYMTlqYkdGemMxOWZPaUJvWVhobFgyTnllWEIwYjE5Q1lYTmxRMjlrWlFwOU93cDJZWElnYUdGNFpWOWtjMTlKYm5STllYQWdQU0JtZFc1amRHbHZiaWdwSUhzS0NYUm9hWE11YUNBOUlIc2dmVHNLZlRzS0pHaDRRMnhoYzNObGMxc2lhR0Y0WlM1a2N5NUpiblJOWVhBaVhTQTlJR2hoZUdWZlpITmZTVzUwVFdGd093cG9ZWGhsWDJSelgwbHVkRTFoY0M1ZlgyNWhiV1ZmWHlBOUlIUnlkV1U3Q21oaGVHVmZaSE5mU1c1MFRXRndMbDlmYVc1MFpYSm1ZV05sYzE5ZklEMGdXMmhoZUdWZlNVMWhjRjA3Q21oaGVHVmZaSE5mU1c1MFRXRndMbkJ5YjNSdmRIbHdaU0E5SUhzS0NWOWZZMnhoYzNOZlh6b2dhR0Y0WlY5a2MxOUpiblJOWVhBS2ZUc0tkbUZ5SUdoaGVHVmZaSE5mVDJKcVpXTjBUV0Z3SUQwZ1puVnVZM1JwYjI0b0tTQjdDZ2wwYUdsekxtZ2dQU0I3SUY5ZmEyVjVjMTlmSURvZ2V5QjlmVHNLZlRzS0pHaDRRMnhoYzNObGMxc2lhR0Y0WlM1a2N5NVBZbXBsWTNSTllYQWlYU0E5SUdoaGVHVmZaSE5mVDJKcVpXTjBUV0Z3T3dwb1lYaGxYMlJ6WDA5aWFtVmpkRTFoY0M1ZlgyNWhiV1ZmWHlBOUlIUnlkV1U3Q21oaGVHVmZaSE5mVDJKcVpXTjBUV0Z3TGw5ZmFXNTBaWEptWVdObGMxOWZJRDBnVzJoaGVHVmZTVTFoY0YwN0NtaGhlR1ZmWkhOZlQySnFaV04wVFdGd0xuQnliM1J2ZEhsd1pTQTlJSHNLQ1hObGREb2dablZ1WTNScGIyNG9hMlY1TEhaaGJIVmxLU0I3Q2drSmRtRnlJR2xrSUQwZ2EyVjVMbDlmYVdSZlh5QjhmQ0FvYTJWNUxsOWZhV1JmWHlBOUlDc3JhR0Y0WlY5a2MxOVBZbXBsWTNSTllYQXVZMjkxYm5RcE93b0pDWFJvYVhNdWFGdHBaRjBnUFNCMllXeDFaVHNLQ1FsMGFHbHpMbWd1WDE5clpYbHpYMTliYVdSZElEMGdhMlY1T3dvSmZRb0pMRjlmWTJ4aGMzTmZYem9nYUdGNFpWOWtjMTlQWW1wbFkzUk5ZWEFLZlRzS2RtRnlJR2hoZUdWZlpITmZVM1J5YVc1blRXRndJRDBnWm5WdVkzUnBiMjRvS1NCN0NnbDBhR2x6TG1nZ1BTQjdJSDA3Q24wN0NpUm9lRU5zWVhOelpYTmJJbWhoZUdVdVpITXVVM1J5YVc1blRXRndJbDBnUFNCb1lYaGxYMlJ6WDFOMGNtbHVaMDFoY0RzS2FHRjRaVjlrYzE5VGRISnBibWROWVhBdVgxOXVZVzFsWDE4Z1BTQjBjblZsT3dwb1lYaGxYMlJ6WDFOMGNtbHVaMDFoY0M1ZlgybHVkR1Z5Wm1GalpYTmZYeUE5SUZ0b1lYaGxYMGxOWVhCZE93cG9ZWGhsWDJSelgxTjBjbWx1WjAxaGNDNXdjbTkwYjNSNWNHVWdQU0I3Q2dselpYUlNaWE5sY25abFpEb2dablZ1WTNScGIyNG9hMlY1TEhaaGJIVmxLU0I3Q2drSmFXWW9kR2hwY3k1eWFDQTlQU0J1ZFd4c0tTQjdDZ2tKQ1hSb2FYTXVjbWdnUFNCN0lIMDdDZ2tKZlFvSkNYUm9hWE11Y21oYklpUWlJQ3NnYTJWNVhTQTlJSFpoYkhWbE93b0pmUW9KTEdkbGRGSmxjMlZ5ZG1Wa09pQm1kVzVqZEdsdmJpaHJaWGtwSUhzS0NRbHBaaWgwYUdsekxuSm9JRDA5SUc1MWJHd3BJSHNLQ1FrSmNtVjBkWEp1SUc1MWJHdzdDZ2tKZlNCbGJITmxJSHNLQ1FrSmNtVjBkWEp1SUhSb2FYTXVjbWhiSWlRaUlDc2dhMlY1WFRzS0NRbDlDZ2w5Q2drc1pYaHBjM1J6VW1WelpYSjJaV1E2SUdaMWJtTjBhVzl1S0d0bGVTa2dld29KQ1dsbUtIUm9hWE11Y21nZ1BUMGdiblZzYkNrZ2V3b0pDUWx5WlhSMWNtNGdabUZzYzJVN0Nna0pmUW9KQ1hKbGRIVnliaUIwYUdsekxuSm9MbWhoYzA5M2JsQnliM0JsY25SNUtDSWtJaUFySUd0bGVTazdDZ2w5Q2drc2EyVjVjem9nWm5WdVkzUnBiMjRvS1NCN0Nna0pjbVYwZFhKdUlFaDRUM1psY25KcFpHVnpMbWwwWlhJb2RHaHBjeTVoY25KaGVVdGxlWE1vS1NrN0NnbDlDZ2tzWVhKeVlYbExaWGx6T2lCbWRXNWpkR2x2YmlncElIc0tDUWwyWVhJZ2IzVjBJRDBnVzEwN0Nna0pabTl5S0NCMllYSWdhMlY1SUdsdUlIUm9hWE11YUNBcElIc0tDUWxwWmloMGFHbHpMbWd1YUdGelQzZHVVSEp2Y0dWeWRIa29hMlY1S1NrZ2V3b0pDUWx2ZFhRdWNIVnphQ2hyWlhrcE93b0pDWDBLQ1FsOUNna0phV1lvZEdocGN5NXlhQ0FoUFNCdWRXeHNLU0I3Q2drSkNXWnZjaWdnZG1GeUlHdGxlU0JwYmlCMGFHbHpMbkpvSUNrZ2V3b0pDUWxwWmloclpYa3VZMmhoY2tOdlpHVkJkQ2d3S1NBOVBTQXpOaWtnZXdvSkNRa0piM1YwTG5CMWMyZ29hMlY1TG5OMVluTjBjaWd4S1NrN0Nna0pDWDBLQ1FrSmZRb0pDWDBLQ1FseVpYUjFjbTRnYjNWME93b0pmUW9KTEY5ZlkyeGhjM05mWHpvZ2FHRjRaVjlrYzE5VGRISnBibWROWVhBS2ZUc0tkbUZ5SUdoaGVHVmZhVzlmUlhKeWIzSWdQU0FrYUhoRGJHRnpjMlZ6V3lKb1lYaGxMbWx2TGtWeWNtOXlJbDBnUFNCN0lGOWZaVzVoYldWZlh5QTZJSFJ5ZFdVc0lGOWZZMjl1YzNSeWRXTjBjMTlmSURvZ1d5SkNiRzlqYTJWa0lpd2lUM1psY21ac2IzY2lMQ0pQZFhSemFXUmxRbTkxYm1Seklpd2lRM1Z6ZEc5dElsMGdmVHNLYUdGNFpWOXBiMTlGY25KdmNpNUNiRzlqYTJWa0lEMGdXeUpDYkc5amEyVmtJaXd3WFRzS2FHRjRaVjlwYjE5RmNuSnZjaTVDYkc5amEyVmtMblJ2VTNSeWFXNW5JRDBnSkdWemRISTdDbWhoZUdWZmFXOWZSWEp5YjNJdVFteHZZMnRsWkM1ZlgyVnVkVzFmWHlBOUlHaGhlR1ZmYVc5ZlJYSnliM0k3Q21oaGVHVmZhVzlmUlhKeWIzSXVUM1psY21ac2IzY2dQU0JiSWs5MlpYSm1iRzkzSWl3eFhUc0thR0Y0WlY5cGIxOUZjbkp2Y2k1UGRtVnlabXh2ZHk1MGIxTjBjbWx1WnlBOUlDUmxjM1J5T3dwb1lYaGxYMmx2WDBWeWNtOXlMazkyWlhKbWJHOTNMbDlmWlc1MWJWOWZJRDBnYUdGNFpWOXBiMTlGY25KdmNqc0thR0Y0WlY5cGIxOUZjbkp2Y2k1UGRYUnphV1JsUW05MWJtUnpJRDBnV3lKUGRYUnphV1JsUW05MWJtUnpJaXd5WFRzS2FHRjRaVjlwYjE5RmNuSnZjaTVQZFhSemFXUmxRbTkxYm1SekxuUnZVM1J5YVc1bklEMGdKR1Z6ZEhJN0NtaGhlR1ZmYVc5ZlJYSnliM0l1VDNWMGMybGtaVUp2ZFc1a2N5NWZYMlZ1ZFcxZlh5QTlJR2hoZUdWZmFXOWZSWEp5YjNJN0NtaGhlR1ZmYVc5ZlJYSnliM0l1UTNWemRHOXRJRDBnWm5WdVkzUnBiMjRvWlNrZ2V5QjJZWElnSkhnZ1BTQmJJa04xYzNSdmJTSXNNeXhsWFRzZ0pIZ3VYMTlsYm5WdFgxOGdQU0JvWVhobFgybHZYMFZ5Y205eU95QWtlQzUwYjFOMGNtbHVaeUE5SUNSbGMzUnlPeUJ5WlhSMWNtNGdKSGc3SUgwN0NuWmhjaUJxYzE5ZkpFSnZiM1JmU0dGNFpVVnljbTl5SUQwZ1puVnVZM1JwYjI0b2RtRnNLU0I3Q2dsRmNuSnZjaTVqWVd4c0tIUm9hWE1wT3dvSmRHaHBjeTUyWVd3Z1BTQjJZV3c3Q2dsMGFHbHpMbTFsYzNOaFoyVWdQU0JUZEhKcGJtY29kbUZzS1RzS0NXbG1LRVZ5Y205eUxtTmhjSFIxY21WVGRHRmphMVJ5WVdObEtTQjdDZ2tKUlhKeWIzSXVZMkZ3ZEhWeVpWTjBZV05yVkhKaFkyVW9kR2hwY3l4cWMxOWZKRUp2YjNSZlNHRjRaVVZ5Y205eUtUc0tDWDBLZlRzS0pHaDRRMnhoYzNObGMxc2lhbk11WDBKdmIzUXVTR0Y0WlVWeWNtOXlJbDBnUFNCcWMxOWZKRUp2YjNSZlNHRjRaVVZ5Y205eU93cHFjMTlmSkVKdmIzUmZTR0Y0WlVWeWNtOXlMbDlmYm1GdFpWOWZJRDBnZEhKMVpUc0thbk5mWHlSQ2IyOTBYMGhoZUdWRmNuSnZjaTUzY21Gd0lEMGdablZ1WTNScGIyNG9kbUZzS1NCN0NnbHBaaWdvZG1Gc0lHbHVjM1JoYm1ObGIyWWdSWEp5YjNJcEtTQjdDZ2tKY21WMGRYSnVJSFpoYkRzS0NYMGdaV3h6WlNCN0Nna0pjbVYwZFhKdUlHNWxkeUJxYzE5ZkpFSnZiM1JmU0dGNFpVVnljbTl5S0haaGJDazdDZ2w5Q24wN0NtcHpYMThrUW05dmRGOUlZWGhsUlhKeWIzSXVYMTl6ZFhCbGNsOWZJRDBnUlhKeWIzSTdDbXB6WDE4a1FtOXZkRjlJWVhobFJYSnliM0l1Y0hKdmRHOTBlWEJsSUQwZ0pHVjRkR1Z1WkNoRmNuSnZjaTV3Y205MGIzUjVjR1VzZXdvSlgxOWpiR0Z6YzE5Zk9pQnFjMTlmSkVKdmIzUmZTR0Y0WlVWeWNtOXlDbjBwT3dwMllYSWdhbk5mUW05dmRDQTlJR1oxYm1OMGFXOXVLQ2tnZXlCOU93b2thSGhEYkdGemMyVnpXeUpxY3k1Q2IyOTBJbDBnUFNCcWMxOUNiMjkwT3dwcWMxOUNiMjkwTGw5ZmJtRnRaVjlmSUQwZ2RISjFaVHNLYW5OZlFtOXZkQzVuWlhSRGJHRnpjeUE5SUdaMWJtTjBhVzl1S0c4cElIc0tDV2xtS0NodklHbHVjM1JoYm1ObGIyWWdRWEp5WVhrcElDWW1JRzh1WDE5bGJuVnRYMThnUFQwZ2JuVnNiQ2tnZXdvSkNYSmxkSFZ5YmlCQmNuSmhlVHNLQ1gwZ1pXeHpaU0I3Q2drSmRtRnlJR05zSUQwZ2J5NWZYMk5zWVhOelgxODdDZ2tKYVdZb1kyd2dJVDBnYm5Wc2JDa2dld29KQ1FseVpYUjFjbTRnWTJ3N0Nna0pmUW9KQ1haaGNpQnVZVzFsSUQwZ2FuTmZRbTl2ZEM1ZlgyNWhkR2wyWlVOc1lYTnpUbUZ0WlNodktUc0tDUWxwWmlodVlXMWxJQ0U5SUc1MWJHd3BJSHNLQ1FrSmNtVjBkWEp1SUdwelgwSnZiM1F1WDE5eVpYTnZiSFpsVG1GMGFYWmxRMnhoYzNNb2JtRnRaU2s3Q2drSmZRb0pDWEpsZEhWeWJpQnVkV3hzT3dvSmZRcDlPd3BxYzE5Q2IyOTBMbDlmYzNSeWFXNW5YM0psWXlBOUlHWjFibU4wYVc5dUtHOHNjeWtnZXdvSmFXWW9ieUE5UFNCdWRXeHNLU0I3Q2drSmNtVjBkWEp1SUNKdWRXeHNJanNLQ1gwS0NXbG1LSE11YkdWdVozUm9JRDQ5SURVcElIc0tDUWx5WlhSMWNtNGdJand1TGk0K0lqc0tDWDBLQ1haaGNpQjBJRDBnZEhsd1pXOW1LRzhwT3dvSmFXWW9kQ0E5UFNBaVpuVnVZM1JwYjI0aUlDWW1JQ2h2TGw5ZmJtRnRaVjlmSUh4OElHOHVYMTlsYm1GdFpWOWZLU2tnZXdvSkNYUWdQU0FpYjJKcVpXTjBJanNLQ1gwS0NYTjNhWFJqYUNoMEtTQjdDZ2xqWVhObElDSm1kVzVqZEdsdmJpSTZDZ2tKY21WMGRYSnVJQ0k4Wm5WdVkzUnBiMjQrSWpzS0NXTmhjMlVnSW05aWFtVmpkQ0k2Q2drSmFXWW9ieUJwYm5OMFlXNWpaVzltSUVGeWNtRjVLU0I3Q2drSkNXbG1LRzh1WDE5bGJuVnRYMThwSUhzS0NRa0pDV2xtS0c4dWJHVnVaM1JvSUQwOUlESXBJSHNLQ1FrSkNRbHlaWFIxY200Z2Ixc3dYVHNLQ1FrSkNYMEtDUWtKQ1haaGNpQnpkSElnUFNCdld6QmRJQ3NnSWlnaU93b0pDUWtKY3lBclBTQWlYSFFpT3dvSkNRa0pkbUZ5SUY5bk1TQTlJREk3Q2drSkNRbDJZWElnWDJjZ1BTQnZMbXhsYm1kMGFEc0tDUWtKQ1hkb2FXeGxLRjluTVNBOElGOW5LU0I3Q2drSkNRa0pkbUZ5SUdrZ1BTQmZaekVyS3pzS0NRa0pDUWxwWmlocElDRTlJRElwSUhzS0NRa0pDUWtKYzNSeUlDczlJQ0lzSWlBcklHcHpYMEp2YjNRdVgxOXpkSEpwYm1kZmNtVmpLRzliYVYwc2N5azdDZ2tKQ1FrSmZTQmxiSE5sSUhzS0NRa0pDUWtKYzNSeUlDczlJR3B6WDBKdmIzUXVYMTl6ZEhKcGJtZGZjbVZqS0c5YmFWMHNjeWs3Q2drSkNRa0pmUW9KQ1FrSmZRb0pDUWtKY21WMGRYSnVJSE4wY2lBcklDSXBJanNLQ1FrSmZRb0pDUWwyWVhJZ2JDQTlJRzh1YkdWdVozUm9Pd29KQ1FsMllYSWdhVEU3Q2drSkNYWmhjaUJ6ZEhJeElEMGdJbHNpT3dvSkNRbHpJQ3M5SUNKY2RDSTdDZ2tKQ1haaGNpQmZaekV4SUQwZ01Ec0tDUWtKZG1GeUlGOW5NaUE5SUd3N0Nna0pDWGRvYVd4bEtGOW5NVEVnUENCZlp6SXBJSHNLQ1FrSkNYWmhjaUJwTWlBOUlGOW5NVEVyS3pzS0NRa0pDWE4wY2pFZ0t6MGdLR2t5SUQ0Z01DQS9JQ0lzSWlBNklDSWlLU0FySUdwelgwSnZiM1F1WDE5emRISnBibWRmY21WaktHOWJhVEpkTEhNcE93b0pDUWw5Q2drSkNYTjBjakVnS3owZ0lsMGlPd29KQ1FseVpYUjFjbTRnYzNSeU1Uc0tDUWw5Q2drSmRtRnlJSFJ2YzNSeU93b0pDWFJ5ZVNCN0Nna0pDWFJ2YzNSeUlEMGdieTUwYjFOMGNtbHVaenNLQ1FsOUlHTmhkR05vS0NCbElDa2dld29KQ1FseVpYUjFjbTRnSWo4L1B5STdDZ2tKZlFvSkNXbG1LSFJ2YzNSeUlDRTlJRzUxYkd3Z0ppWWdkRzl6ZEhJZ0lUMGdUMkpxWldOMExuUnZVM1J5YVc1bklDWW1JSFI1Y0dWdlppaDBiM04wY2lrZ1BUMGdJbVoxYm1OMGFXOXVJaWtnZXdvSkNRbDJZWElnY3pJZ1BTQnZMblJ2VTNSeWFXNW5LQ2s3Q2drSkNXbG1LSE15SUNFOUlDSmJiMkpxWldOMElFOWlhbVZqZEYwaUtTQjdDZ2tKQ1FseVpYUjFjbTRnY3pJN0Nna0pDWDBLQ1FsOUNna0pkbUZ5SUdzZ1BTQnVkV3hzT3dvSkNYWmhjaUJ6ZEhJeUlEMGdJbnRjYmlJN0Nna0pjeUFyUFNBaVhIUWlPd29KQ1haaGNpQm9ZWE53SUQwZ2J5NW9ZWE5QZDI1UWNtOXdaWEowZVNBaFBTQnVkV3hzT3dvSkNXWnZjaWdnZG1GeUlHc2dhVzRnYnlBcElIc0tDUWxwWmlob1lYTndJQ1ltSUNGdkxtaGhjMDkzYmxCeWIzQmxjblI1S0dzcEtTQjdDZ2tKQ1dOdmJuUnBiblZsT3dvSkNYMEtDUWxwWmlocklEMDlJQ0p3Y205MGIzUjVjR1VpSUh4OElHc2dQVDBnSWw5ZlkyeGhjM05mWHlJZ2ZId2dheUE5UFNBaVgxOXpkWEJsY2w5ZklpQjhmQ0JySUQwOUlDSmZYMmx1ZEdWeVptRmpaWE5mWHlJZ2ZId2dheUE5UFNBaVgxOXdjbTl3WlhKMGFXVnpYMThpS1NCN0Nna0pDV052Ym5ScGJuVmxPd29KQ1gwS0NRbHBaaWh6ZEhJeUxteGxibWQwYUNBaFBTQXlLU0I3Q2drSkNYTjBjaklnS3owZ0lpd2dYRzRpT3dvSkNYMEtDUWx6ZEhJeUlDczlJSE1nS3lCcklDc2dJaUE2SUNJZ0t5QnFjMTlDYjI5MExsOWZjM1J5YVc1blgzSmxZeWh2VzJ0ZExITXBPd29KQ1gwS0NRbHpJRDBnY3k1emRXSnpkSEpwYm1jb01TazdDZ2tKYzNSeU1pQXJQU0FpWEc0aUlDc2djeUFySUNKOUlqc0tDUWx5WlhSMWNtNGdjM1J5TWpzS0NXTmhjMlVnSW5OMGNtbHVaeUk2Q2drSmNtVjBkWEp1SUc4N0NnbGtaV1poZFd4ME9nb0pDWEpsZEhWeWJpQlRkSEpwYm1jb2J5azdDZ2w5Q24wN0NtcHpYMEp2YjNRdVgxOXBiblJsY21aTWIyOXdJRDBnWm5WdVkzUnBiMjRvWTJNc1kyd3BJSHNLQ1dsbUtHTmpJRDA5SUc1MWJHd3BJSHNLQ1FseVpYUjFjbTRnWm1Gc2MyVTdDZ2w5Q2dscFppaGpZeUE5UFNCamJDa2dld29KQ1hKbGRIVnliaUIwY25WbE93b0pmUW9KZG1GeUlHbHVkR1lnUFNCall5NWZYMmx1ZEdWeVptRmpaWE5mWHpzS0NXbG1LR2x1ZEdZZ0lUMGdiblZzYkNrZ2V3b0pDWFpoY2lCZlp6RWdQU0F3T3dvSkNYWmhjaUJmWnlBOUlHbHVkR1l1YkdWdVozUm9Pd29KQ1hkb2FXeGxLRjluTVNBOElGOW5LU0I3Q2drSkNYWmhjaUJwSUQwZ1gyY3hLeXM3Q2drSkNYWmhjaUJwTVNBOUlHbHVkR1piYVYwN0Nna0pDV2xtS0dreElEMDlJR05zSUh4OElHcHpYMEp2YjNRdVgxOXBiblJsY21aTWIyOXdLR2t4TEdOc0tTa2dld29KQ1FrSmNtVjBkWEp1SUhSeWRXVTdDZ2tKQ1gwS0NRbDlDZ2w5Q2dseVpYUjFjbTRnYW5OZlFtOXZkQzVmWDJsdWRHVnlaa3h2YjNBb1kyTXVYMTl6ZFhCbGNsOWZMR05zS1RzS2ZUc0thbk5mUW05dmRDNWZYMmx1YzNSaGJtTmxiMllnUFNCbWRXNWpkR2x2YmlodkxHTnNLU0I3Q2dscFppaGpiQ0E5UFNCdWRXeHNLU0I3Q2drSmNtVjBkWEp1SUdaaGJITmxPd29KZlFvSmMzZHBkR05vS0dOc0tTQjdDZ2xqWVhObElFRnljbUY1T2dvSkNXbG1LQ2h2SUdsdWMzUmhibU5sYjJZZ1FYSnlZWGtwS1NCN0Nna0pDWEpsZEhWeWJpQnZMbDlmWlc1MWJWOWZJRDA5SUc1MWJHdzdDZ2tKZlNCbGJITmxJSHNLQ1FrSmNtVjBkWEp1SUdaaGJITmxPd29KQ1gwS0NRbGljbVZoYXpzS0NXTmhjMlVnUW05dmJEb0tDUWx5WlhSMWNtNGdkSGx3Wlc5bUtHOHBJRDA5SUNKaWIyOXNaV0Z1SWpzS0NXTmhjMlVnUkhsdVlXMXBZem9LQ1FseVpYUjFjbTRnZEhKMVpUc0tDV05oYzJVZ1JteHZZWFE2Q2drSmNtVjBkWEp1SUhSNWNHVnZaaWh2S1NBOVBTQWliblZ0WW1WeUlqc0tDV05oYzJVZ1NXNTBPZ29KQ1dsbUtIUjVjR1Z2WmlodktTQTlQU0FpYm5WdFltVnlJaWtnZXdvSkNRbHlaWFIxY200Z0tHOThNQ2tnUFQwOUlHODdDZ2tKZlNCbGJITmxJSHNLQ1FrSmNtVjBkWEp1SUdaaGJITmxPd29KQ1gwS0NRbGljbVZoYXpzS0NXTmhjMlVnVTNSeWFXNW5PZ29KQ1hKbGRIVnliaUIwZVhCbGIyWW9ieWtnUFQwZ0luTjBjbWx1WnlJN0NnbGtaV1poZFd4ME9nb0pDV2xtS0c4Z0lUMGdiblZzYkNrZ2V3b0pDUWxwWmloMGVYQmxiMllvWTJ3cElEMDlJQ0ptZFc1amRHbHZiaUlwSUhzS0NRa0pDV2xtS0c4Z2FXNXpkR0Z1WTJWdlppQmpiQ2tnZXdvSkNRa0pDWEpsZEhWeWJpQjBjblZsT3dvSkNRa0pmUW9KQ1FrSmFXWW9hbk5mUW05dmRDNWZYMmx1ZEdWeVpreHZiM0FvYW5OZlFtOXZkQzVuWlhSRGJHRnpjeWh2S1N4amJDa3BJSHNLQ1FrSkNRbHlaWFIxY200Z2RISjFaVHNLQ1FrSkNYMEtDUWtKZlNCbGJITmxJR2xtS0hSNWNHVnZaaWhqYkNrZ1BUMGdJbTlpYW1WamRDSWdKaVlnYW5OZlFtOXZkQzVmWDJselRtRjBhWFpsVDJKcUtHTnNLU2tnZXdvSkNRa0phV1lvYnlCcGJuTjBZVzVqWlc5bUlHTnNLU0I3Q2drSkNRa0pjbVYwZFhKdUlIUnlkV1U3Q2drSkNRbDlDZ2tKQ1gwS0NRbDlJR1ZzYzJVZ2V3b0pDUWx5WlhSMWNtNGdabUZzYzJVN0Nna0pmUW9KQ1dsbUtHTnNJRDA5SUVOc1lYTnpJRDhnYnk1ZlgyNWhiV1ZmWHlBaFBTQnVkV3hzSURvZ1ptRnNjMlVwSUhzS0NRa0pjbVYwZFhKdUlIUnlkV1U3Q2drSmZRb0pDV2xtS0dOc0lEMDlJRVZ1ZFcwZ1B5QnZMbDlmWlc1aGJXVmZYeUFoUFNCdWRXeHNJRG9nWm1Gc2MyVXBJSHNLQ1FrSmNtVjBkWEp1SUhSeWRXVTdDZ2tKZlFvSkNYSmxkSFZ5YmlCdkxsOWZaVzUxYlY5ZklEMDlJR05zT3dvSmZRcDlPd3BxYzE5Q2IyOTBMbDlmYm1GMGFYWmxRMnhoYzNOT1lXMWxJRDBnWm5WdVkzUnBiMjRvYnlrZ2V3b0pkbUZ5SUc1aGJXVWdQU0JxYzE5Q2IyOTBMbDlmZEc5VGRISXVZMkZzYkNodktTNXpiR2xqWlNnNExDMHhLVHNLQ1dsbUtHNWhiV1VnUFQwZ0lrOWlhbVZqZENJZ2ZId2dibUZ0WlNBOVBTQWlSblZ1WTNScGIyNGlJSHg4SUc1aGJXVWdQVDBnSWsxaGRHZ2lJSHg4SUc1aGJXVWdQVDBnSWtwVFQwNGlLU0I3Q2drSmNtVjBkWEp1SUc1MWJHdzdDZ2w5Q2dseVpYUjFjbTRnYm1GdFpUc0tmVHNLYW5OZlFtOXZkQzVmWDJselRtRjBhWFpsVDJKcUlEMGdablZ1WTNScGIyNG9ieWtnZXdvSmNtVjBkWEp1SUdwelgwSnZiM1F1WDE5dVlYUnBkbVZEYkdGemMwNWhiV1VvYnlrZ0lUMGdiblZzYkRzS2ZUc0thbk5mUW05dmRDNWZYM0psYzI5c2RtVk9ZWFJwZG1WRGJHRnpjeUE5SUdaMWJtTjBhVzl1S0c1aGJXVXBJSHNLQ1hKbGRIVnliaUFrWjJ4dlltRnNXMjVoYldWZE93cDlPd3AyWVhJZ2FuTmZhSFJ0YkY5amIyMXdZWFJmUVhKeVlYbENkV1ptWlhJZ1BTQm1kVzVqZEdsdmJpaGhLU0I3Q2dscFppZ29ZU0JwYm5OMFlXNWpaVzltSUVGeWNtRjVLU0FtSmlCaExsOWZaVzUxYlY5ZklEMDlJRzUxYkd3cElIc0tDUWwwYUdsekxtRWdQU0JoT3dvSkNYUm9hWE11WW5sMFpVeGxibWQwYUNBOUlHRXViR1Z1WjNSb093b0pmU0JsYkhObElIc0tDUWwyWVhJZ2JHVnVJRDBnWVRzS0NRbDBhR2x6TG1FZ1BTQmJYVHNLQ1FsMllYSWdYMmN4SUQwZ01Ec0tDUWwyWVhJZ1gyY2dQU0JzWlc0N0Nna0pkMmhwYkdVb1gyY3hJRHdnWDJjcElIc0tDUWtKZG1GeUlHa2dQU0JmWnpFckt6c0tDUWtKZEdocGN5NWhXMmxkSUQwZ01Ec0tDUWw5Q2drSmRHaHBjeTVpZVhSbFRHVnVaM1JvSUQwZ2JHVnVPd29KZlFwOU93b2thSGhEYkdGemMyVnpXeUpxY3k1b2RHMXNMbU52YlhCaGRDNUJjbkpoZVVKMVptWmxjaUpkSUQwZ2FuTmZhSFJ0YkY5amIyMXdZWFJmUVhKeVlYbENkV1ptWlhJN0NtcHpYMmgwYld4ZlkyOXRjR0YwWDBGeWNtRjVRblZtWm1WeUxsOWZibUZ0WlY5ZklEMGdkSEoxWlRzS2FuTmZhSFJ0YkY5amIyMXdZWFJmUVhKeVlYbENkV1ptWlhJdWMyeHBZMlZKYlhCc0lEMGdablZ1WTNScGIyNG9ZbVZuYVc0c1pXNWtLU0I3Q2dsMllYSWdkU0E5SUc1bGR5QlZhVzUwT0VGeWNtRjVLSFJvYVhNc1ltVm5hVzRzWlc1a0lEMDlJRzUxYkd3Z1B5QnVkV3hzSURvZ1pXNWtJQzBnWW1WbmFXNHBPd29KZG1GeUlISmxjM1ZzZENBOUlHNWxkeUJCY25KaGVVSjFabVpsY2loMUxtSjVkR1ZNWlc1bmRHZ3BPd29KZG1GeUlISmxjM1ZzZEVGeWNtRjVJRDBnYm1WM0lGVnBiblE0UVhKeVlYa29jbVZ6ZFd4MEtUc0tDWEpsYzNWc2RFRnljbUY1TG5ObGRDaDFLVHNLQ1hKbGRIVnliaUJ5WlhOMWJIUTdDbjA3Q21welgyaDBiV3hmWTI5dGNHRjBYMEZ5Y21GNVFuVm1abVZ5TG5CeWIzUnZkSGx3WlNBOUlIc0tDWE5zYVdObE9pQm1kVzVqZEdsdmJpaGlaV2RwYml4bGJtUXBJSHNLQ1FseVpYUjFjbTRnYm1WM0lHcHpYMmgwYld4ZlkyOXRjR0YwWDBGeWNtRjVRblZtWm1WeUtIUm9hWE11WVM1emJHbGpaU2hpWldkcGJpeGxibVFwS1RzS0NYMEtDU3hmWDJOc1lYTnpYMTg2SUdwelgyaDBiV3hmWTI5dGNHRjBYMEZ5Y21GNVFuVm1abVZ5Q24wN0NuWmhjaUJxYzE5b2RHMXNYMk52YlhCaGRGOVZhVzUwT0VGeWNtRjVJRDBnWm5WdVkzUnBiMjRvS1NCN0lIMDdDaVJvZUVOc1lYTnpaWE5iSW1wekxtaDBiV3d1WTI5dGNHRjBMbFZwYm5RNFFYSnlZWGtpWFNBOUlHcHpYMmgwYld4ZlkyOXRjR0YwWDFWcGJuUTRRWEp5WVhrN0NtcHpYMmgwYld4ZlkyOXRjR0YwWDFWcGJuUTRRWEp5WVhrdVgxOXVZVzFsWDE4Z1BTQjBjblZsT3dwcWMxOW9kRzFzWDJOdmJYQmhkRjlWYVc1ME9FRnljbUY1TGw5dVpYY2dQU0JtZFc1amRHbHZiaWhoY21jeExHOW1abk5sZEN4c1pXNW5kR2dwSUhzS0NYWmhjaUJoY25JN0NnbHBaaWgwZVhCbGIyWW9ZWEpuTVNrZ1BUMGdJbTUxYldKbGNpSXBJSHNLQ1FsaGNuSWdQU0JiWFRzS0NRbDJZWElnWDJjeElEMGdNRHNLQ1FsMllYSWdYMmNnUFNCaGNtY3hPd29KQ1hkb2FXeGxLRjluTVNBOElGOW5LU0I3Q2drSkNYWmhjaUJwSUQwZ1gyY3hLeXM3Q2drSkNXRnljbHRwWFNBOUlEQTdDZ2tKZlFvSkNXRnljaTVpZVhSbFRHVnVaM1JvSUQwZ1lYSnlMbXhsYm1kMGFEc0tDUWxoY25JdVlubDBaVTltWm5ObGRDQTlJREE3Q2drSllYSnlMbUoxWm1abGNpQTlJRzVsZHlCcWMxOW9kRzFzWDJOdmJYQmhkRjlCY25KaGVVSjFabVpsY2loaGNuSXBPd29KZlNCbGJITmxJR2xtS0dwelgwSnZiM1F1WDE5cGJuTjBZVzVqWlc5bUtHRnlaekVzYW5OZmFIUnRiRjlqYjIxd1lYUmZRWEp5WVhsQ2RXWm1aWElwS1NCN0Nna0pkbUZ5SUdKMVptWmxjaUE5SUdGeVp6RTdDZ2tKYVdZb2IyWm1jMlYwSUQwOUlHNTFiR3dwSUhzS0NRa0piMlptYzJWMElEMGdNRHNLQ1FsOUNna0phV1lvYkdWdVozUm9JRDA5SUc1MWJHd3BJSHNLQ1FrSmJHVnVaM1JvSUQwZ1luVm1abVZ5TG1KNWRHVk1aVzVuZEdnZ0xTQnZabVp6WlhRN0Nna0pmUW9KQ1dsbUtHOW1abk5sZENBOVBTQXdLU0I3Q2drSkNXRnljaUE5SUdKMVptWmxjaTVoT3dvSkNYMGdaV3h6WlNCN0Nna0pDV0Z5Y2lBOUlHSjFabVpsY2k1aExuTnNhV05sS0c5bVpuTmxkQ3h2Wm1aelpYUWdLeUJzWlc1bmRHZ3BPd29KQ1gwS0NRbGhjbkl1WW5sMFpVeGxibWQwYUNBOUlHRnljaTVzWlc1bmRHZzdDZ2tKWVhKeUxtSjVkR1ZQWm1aelpYUWdQU0J2Wm1aelpYUTdDZ2tKWVhKeUxtSjFabVpsY2lBOUlHSjFabVpsY2pzS0NYMGdaV3h6WlNCcFppZ29ZWEpuTVNCcGJuTjBZVzVqWlc5bUlFRnljbUY1S1NBbUppQmhjbWN4TGw5ZlpXNTFiVjlmSUQwOUlHNTFiR3dwSUhzS0NRbGhjbklnUFNCaGNtY3hMbk5zYVdObEtDazdDZ2tKWVhKeUxtSjVkR1ZNWlc1bmRHZ2dQU0JoY25JdWJHVnVaM1JvT3dvSkNXRnljaTVpZVhSbFQyWm1jMlYwSUQwZ01Ec0tDUWxoY25JdVluVm1abVZ5SUQwZ2JtVjNJR3B6WDJoMGJXeGZZMjl0Y0dGMFgwRnljbUY1UW5WbVptVnlLR0Z5Y2lrN0NnbDlJR1ZzYzJVZ2V3b0pDWFJvY205M0lHNWxkeUJxYzE5ZkpFSnZiM1JmU0dGNFpVVnljbTl5S0NKVVQwUlBJQ0lnS3lCVGRHUXVjM1J5YVc1bktHRnlaekVwS1RzS0NYMEtDV0Z5Y2k1emRXSmhjbkpoZVNBOUlHcHpYMmgwYld4ZlkyOXRjR0YwWDFWcGJuUTRRWEp5WVhrdVgzTjFZbUZ5Y21GNU93b0pZWEp5TG5ObGRDQTlJR3B6WDJoMGJXeGZZMjl0Y0dGMFgxVnBiblE0UVhKeVlYa3VYM05sZERzS0NYSmxkSFZ5YmlCaGNuSTdDbjA3Q21welgyaDBiV3hmWTI5dGNHRjBYMVZwYm5RNFFYSnlZWGt1WDNObGRDQTlJR1oxYm1OMGFXOXVLR0Z5Wnl4dlptWnpaWFFwSUhzS0NXbG1LR3B6WDBKdmIzUXVYMTlwYm5OMFlXNWpaVzltS0dGeVp5NWlkV1ptWlhJc2FuTmZhSFJ0YkY5amIyMXdZWFJmUVhKeVlYbENkV1ptWlhJcEtTQjdDZ2tKZG1GeUlHRWdQU0JoY21jN0Nna0phV1lvWVhKbkxtSjVkR1ZNWlc1bmRHZ2dLeUJ2Wm1aelpYUWdQaUIwYUdsekxtSjVkR1ZNWlc1bmRHZ3BJSHNLQ1FrSmRHaHliM2NnYm1WM0lHcHpYMThrUW05dmRGOUlZWGhsUlhKeWIzSW9Jbk5sZENncElHOTFkSE5wWkdVZ2IyWWdjbUZ1WjJVaUtUc0tDUWw5Q2drSmRtRnlJRjluTVNBOUlEQTdDZ2tKZG1GeUlGOW5JRDBnWVhKbkxtSjVkR1ZNWlc1bmRHZzdDZ2tKZDJocGJHVW9YMmN4SUR3Z1gyY3BJSHNLQ1FrSmRtRnlJR2tnUFNCZlp6RXJLenNLQ1FrSmRHaHBjMXRwSUNzZ2IyWm1jMlYwWFNBOUlHRmJhVjA3Q2drSmZRb0pmU0JsYkhObElHbG1LQ2hoY21jZ2FXNXpkR0Z1WTJWdlppQkJjbkpoZVNrZ0ppWWdZWEpuTGw5ZlpXNTFiVjlmSUQwOUlHNTFiR3dwSUhzS0NRbDJZWElnWVRFZ1BTQmhjbWM3Q2drSmFXWW9ZVEV1YkdWdVozUm9JQ3NnYjJabWMyVjBJRDRnZEdocGN5NWllWFJsVEdWdVozUm9LU0I3Q2drSkNYUm9jbTkzSUc1bGR5QnFjMTlmSkVKdmIzUmZTR0Y0WlVWeWNtOXlLQ0p6WlhRb0tTQnZkWFJ6YVdSbElHOW1JSEpoYm1kbElpazdDZ2tKZlFvSkNYWmhjaUJmWnpFeElEMGdNRHNLQ1FsMllYSWdYMmN5SUQwZ1lURXViR1Z1WjNSb093b0pDWGRvYVd4bEtGOW5NVEVnUENCZlp6SXBJSHNLQ1FrSmRtRnlJR2t4SUQwZ1gyY3hNU3NyT3dvSkNRbDBhR2x6VzJreElDc2diMlptYzJWMFhTQTlJR0V4VzJreFhUc0tDUWw5Q2dsOUlHVnNjMlVnZXdvSkNYUm9jbTkzSUc1bGR5QnFjMTlmSkVKdmIzUmZTR0Y0WlVWeWNtOXlLQ0pVVDBSUElpazdDZ2w5Q24wN0NtcHpYMmgwYld4ZlkyOXRjR0YwWDFWcGJuUTRRWEp5WVhrdVgzTjFZbUZ5Y21GNUlEMGdablZ1WTNScGIyNG9jM1JoY25Rc1pXNWtLU0I3Q2dsMllYSWdZU0E5SUdwelgyaDBiV3hmWTI5dGNHRjBYMVZwYm5RNFFYSnlZWGt1WDI1bGR5aDBhR2x6TG5Oc2FXTmxLSE4wWVhKMExHVnVaQ2twT3dvSllTNWllWFJsVDJabWMyVjBJRDBnYzNSaGNuUTdDZ2x5WlhSMWNtNGdZVHNLZlRzS0pHaDRRMnhoYzNObGMxc2lUV0YwYUNKZElEMGdUV0YwYURzS1UzUnlhVzVuTG5CeWIzUnZkSGx3WlM1ZlgyTnNZWE56WDE4Z1BTQWthSGhEYkdGemMyVnpXeUpUZEhKcGJtY2lYU0E5SUZOMGNtbHVaenNLVTNSeWFXNW5MbDlmYm1GdFpWOWZJRDBnZEhKMVpUc0tKR2g0UTJ4aGMzTmxjMXNpUVhKeVlYa2lYU0E5SUVGeWNtRjVPd3BCY25KaGVTNWZYMjVoYldWZlh5QTlJSFJ5ZFdVN0NrUmhkR1V1Y0hKdmRHOTBlWEJsTGw5ZlkyeGhjM05mWHlBOUlDUm9lRU5zWVhOelpYTmJJa1JoZEdVaVhTQTlJRVJoZEdVN0NrUmhkR1V1WDE5dVlXMWxYMThnUFNCYklrUmhkR1VpWFRzS2RtRnlJRWx1ZENBOUlDUm9lRU5zWVhOelpYTmJJa2x1ZENKZElEMGdleUJmWDI1aGJXVmZYeUE2SUZzaVNXNTBJbDE5T3dwMllYSWdSSGx1WVcxcFl5QTlJQ1JvZUVOc1lYTnpaWE5iSWtSNWJtRnRhV01pWFNBOUlIc2dYMTl1WVcxbFgxOGdPaUJiSWtSNWJtRnRhV01pWFgwN0NuWmhjaUJHYkc5aGRDQTlJQ1JvZUVOc1lYTnpaWE5iSWtac2IyRjBJbDBnUFNCT2RXMWlaWEk3Q2tac2IyRjBMbDlmYm1GdFpWOWZJRDBnV3lKR2JHOWhkQ0pkT3dwMllYSWdRbTl2YkNBOUlDUm9lRU5zWVhOelpYTmJJa0p2YjJ3aVhTQTlJRUp2YjJ4bFlXNDdDa0p2YjJ3dVgxOWxibUZ0WlY5ZklEMGdXeUpDYjI5c0lsMDdDblpoY2lCRGJHRnpjeUE5SUNSb2VFTnNZWE56WlhOYklrTnNZWE56SWwwZ1BTQjdJRjlmYm1GdFpWOWZJRG9nV3lKRGJHRnpjeUpkZlRzS2RtRnlJRVZ1ZFcwZ1BTQjdJSDA3Q21oaGVHVmZVbVZ6YjNWeVkyVXVZMjl1ZEdWdWRDQTlJRnQ3SUc1aGJXVWdPaUFpWDJobGJIQmZiV0Z3SWl3Z1pHRjBZU0E2SUNKWmJtdDRUMVJ3YTJOdE1XWmpNbFo1WkcxV2VWZ3paSEJhUjFZeVlWYzFiR0l6YXpCUGJXaHNZa2hDTlUxVVp6WlpNamwwVEc1a2NGcEhWakpoVnpWc1RHMUdjMk5IYUdobFZHYzJXa2RXYlZsWVZuTmtSamsxVDBSQk5rcFVWa05hUjFadFdWaFdjMlJEVlhwUlUxVjVUVVZPVkdSSVNuQmliV05zVFdwb2IyUklVbmRqZVZWNlVWTlZlVkpwVlhsU2JtUndXa2RXTW1GWE5XeE1XRUo1WWpOb05VeHRSbmRqU0U1M1lqTlJkVmt5T1hSS1ZFcEhZMGhLZG1WSWEyeE5hbXRzVGxWU2JtRkJJbjFkT3dwMllYSWdYMTl0WVhCZmNtVnpaWEoyWldRZ1BTQjdmVHNLZG1GeUlFRnljbUY1UW5WbVptVnlJRDBnSkdkc2IySmhiQzVCY25KaGVVSjFabVpsY2lCOGZDQnFjMTlvZEcxc1gyTnZiWEJoZEY5QmNuSmhlVUoxWm1abGNqc0thV1lvUVhKeVlYbENkV1ptWlhJdWNISnZkRzkwZVhCbExuTnNhV05sSUQwOUlHNTFiR3dwSUhzS0NVRnljbUY1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzV6YkdsalpTQTlJR3B6WDJoMGJXeGZZMjl0Y0dGMFgwRnljbUY1UW5WbVptVnlMbk5zYVdObFNXMXdiRHNLZlFwMllYSWdWV2x1ZERoQmNuSmhlU0E5SUNSbmJHOWlZV3d1VldsdWREaEJjbkpoZVNCOGZDQnFjMTlvZEcxc1gyTnZiWEJoZEY5VmFXNTBPRUZ5Y21GNUxsOXVaWGM3Q2tGeVoyRnVMa2hGVEZCZlVrVlRUMVZTUTBWZlMwVlpJRDBnSWw5b1pXeHdYMjFoY0NJN0NtaGhlR1ZmVlc1elpYSnBZV3hwZW1WeUxrUkZSa0ZWVEZSZlVrVlRUMHhXUlZJZ1BTQnVaWGNnYUdGNFpWOWZKRlZ1YzJWeWFXRnNhWHBsY2w5RVpXWmhkV3gwVW1WemIyeDJaWElvS1RzS2FHRjRaVjlWYm5ObGNtbGhiR2w2WlhJdVFrRlRSVFkwSUQwZ0lrRkNRMFJGUmtkSVNVcExURTFPVDFCUlVsTlVWVlpYV0ZsYVlXSmpaR1ZtWjJocGFtdHNiVzV2Y0hGeWMzUjFkbmQ0ZVhvd01USXpORFUyTnpnNUpUb2lPd3BvWVhobFgyTnllWEIwYjE5Q1lYTmxOalF1UTBoQlVsTWdQU0FpUVVKRFJFVkdSMGhKU2t0TVRVNVBVRkZTVTFSVlZsZFlXVnBoWW1Oa1pXWm5hR2xxYTJ4dGJtOXdjWEp6ZEhWMmQzaDVlakF4TWpNME5UWTNPRGtyTHlJN0NtaGhlR1ZmWTNKNWNIUnZYMEpoYzJVMk5DNUNXVlJGVXlBOUlHaGhlR1ZmYVc5ZlFubDBaWE11YjJaVGRISnBibWNvYUdGNFpWOWpjbmx3ZEc5ZlFtRnpaVFkwTGtOSVFWSlRLVHNLYUdGNFpWOWtjMTlQWW1wbFkzUk5ZWEF1WTI5MWJuUWdQU0F3T3dwcWMxOUNiMjkwTGw5ZmRHOVRkSElnUFNBb2V5QjlLUzUwYjFOMGNtbHVaenNLYW5OZmFIUnRiRjlqYjIxd1lYUmZWV2x1ZERoQmNuSmhlUzVDV1ZSRlUxOVFSVkpmUlV4RlRVVk9WQ0E5SURFN0NraHNjMHB6TG0xaGFXNG9LVHNLZlNrb2RIbHdaVzltSUhkcGJtUnZkeUFoUFNBaWRXNWtaV1pwYm1Wa0lpQS9JSGRwYm1SdmR5QTZJSFI1Y0dWdlppQm5iRzlpWVd3Z0lUMGdJblZ1WkdWbWFXNWxaQ0lnUHlCbmJHOWlZV3dnT2lCMGVYQmxiMllnYzJWc1ppQWhQU0FpZFc1a1pXWnBibVZrSWlBL0lITmxiR1lnT2lCMGFHbHpLVHNL"},{ name : "logo", data : "PHN2ZyB2aWV3Qm94PSIwIDAgMjM1IDI2MCIgdmVyc2lvbj0iMS4xIiAKICAgICAgICAgICAgICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciPgogICAgPHN0eWxlIHR5cGU9InRleHQvY3NzIiA+CiAgICAgICAgPCFbQ0RBVEFbCiAgICAgICAgICAgIC5saW5lIGxpbmUgewogICAgICAgICAgICAgICAgbWFya2VyLWVuZDogdXJsKCNjYXBweSk7CiAgICAgICAgICAgICAgICBzdHJva2UtbGluZWNhcDogInJvdW5kIjsKICAgICAgICAgICAgICAgIHN0cm9rZS13aWR0aDogMTQ7CiAgICAgICAgICAgICAgICBzdHJva2U6IGN1cnJlbnRDb2xvcjsKICAgICAgICAgICAgICAgIHN0cm9rZS1kYXNoYXJyYXk6IDEwMCAxMDA7CiAgICAgICAgICAgICAgICBzdHJva2UtZGFzaG9mZnNldDogLTQ7CiAgICAgICAgICAgIH0KICAgICAgICBdXT4KICAgIDwvc3R5bGU+CiAgICA8ZGVmcz4KICAgIDxtYXJrZXIgaWQ9ImNhcHB5IgogICAgICAgIHZpZXdCb3g9Ii0yIDAgMzAgMTAiIHJlZlg9IjAiIHJlZlk9IjUiIAogICAgICAgIG1hcmtlclVuaXRzPSJzdHJva2VXaWR0aCIKICAgICAgICBtYXJrZXJXaWR0aD0iMy4wIiBtYXJrZXJIZWlnaHQ9IjEiCiAgICAgICAgb3JpZW50PSJhdXRvIj4KICAgICAgICA8cmVjdCBmaWxsPSJjdXJyZW50Q29sb3IiIHg9Ii01IiB3aWR0aD0iMzAiIGhlaWdodD0iMTAiIHJ4PSI1IiByeT0iNSI+PC9yZWN0PgogICAgPC9tYXJrZXI+CiAgICA8L2RlZnM+CiAgICA8ZyBjbGFzcz0ibGluZSIgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMzAsMzApIj4KICAgICAgICA8cG9seWxpbmUgaWQ9ImhleGFnb24iIHBvaW50cz0iODcsMCAxNzQsNTAgMTc0LDE1MCA4NywyMDAgMCwxNTAgMCw1MCA4NywwIiBmaWxsPSIjRUJFQkVCMDAiLz4KICAgICAgICA8bGluZSB4MT0iODciICAgeTE9IjAiICAgICAgeDI9IjE3NCIgICAgeTI9IjUwIiAvPgogICAgICAgIDxsaW5lIHgxPSIxNzQiICB5MT0iNTAiICAgICB4Mj0iMTc0IiAgICB5Mj0iMTUwIi8+CiAgICAgICAgPGxpbmUgeDE9IjE3NCIgIHkxPSIxNTAiICAgIHgyPSI4NyIgICAgIHkyPSIyMDAiLz4KICAgICAgICA8bGluZSB4MT0iODciICAgeTE9IjIwMCIgICAgeDI9IjAiICAgICAgeTI9IjE1MCIvPgogICAgICAgIDxsaW5lIHgxPSIwIiAgICB5MT0iMTUwIiAgICB4Mj0iMCIgICAgICB5Mj0iNTAiIC8+CiAgICAgICAgPGxpbmUgeDE9IjAiICAgIHkxPSI1MCIgICAgeDI9Ijg3IiAgICAgIHkyPSIwIiAgLz4KICAgICAgICA8ZyB0cmFuc2Zvcm09InRyYW5zbGF0ZSg3MCw3NSkiPgogICAgICAgICAgICA8IS0tcG9seWxpbmUgaWQ9InBsYXkiIHBvaW50cz0iMCwwIDUwLDI1IDAsNTAgMCwwIiBmaWxsPSJjdXJyZW50Q29sb3IiLy0tPgogICAgICAgIDwvZz4KICAgIDwvZz4KPC9zdmc+"},{ name : "hlsjs-argan", data : "eyJkcm1fc2VydmVyX3dpZGV2aW5lIjp7ImhlbHAiOiJjb20ud2lkZXZpbmUuYWxwaGEiLCJkZWZhdWx0XyI6IltkZWZhdWx0OiBDU3RyaW5nKGh0dHBzOi8vd2lkZXZpbmUtcHJveHkuYXBwc3BvdC5jb20vcHJveHkpXSJ9fQ"},{ name : "controls_template", data : "PGRpdiBpZD0iY29udHJvbHNfZWxlbWVudHMiPgogICAgPHNjcmlwdD4KICAgICAgICAvKgogICAgICAgIHZhciBjb250cm9sc19lbGVtZW50cyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgIHZhciB0YXJnZXQgPSB3aW5kb3cuZnJhbWVFbGVtZW50LnBhcmVudEVsZW1lbnQ7CiAgICAgICAgdGFyZ2V0LnBhcmVudEVsZW1lbnQuaW5zZXJ0QmVmb3JlKGNvbnRyb2xzX2VsZW1lbnRzLCB0YXJnZXQubmV4dFNpYmxpbmcpOwogICAgICAgICovCiAgICAgICAgdmFyIGxvYWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJsb2FkZXIiKTsKICAgICAgICAKICAgICAgICB2YXIgY29udGFpbmVyID0gd2luZG93LmZyYW1lRWxlbWVudC5wYXJlbnRFbGVtZW50OwogICAgICAgIGNsZWFyTWVudSA9IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIHdoaWxlKGNvbnRyb2xzX2VsZW1lbnRzLmZpcnN0Q2hpbGQpCiAgICAgICAgICAgICAgICBjb250cm9sc19lbGVtZW50cy5yZW1vdmVDaGlsZChjb250cm9sc19lbGVtZW50cy5maXJzdENoaWxkKTsKICAgICAgICB9CiAgICAgICAgdmFyIHJlc2V0Q29udHJvbHNIZWlnaHQgPSBmdW5jdGlvbigpewogICAgICAgICAgICAvL29mZnNldCBjb250YWluZXIgaGVpZ2h0IHdpdGggaGVpZ2h0IG9mIGNvbnRyb2xzCiAgICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBjb250cm9sc19lbGVtZW50cy5wYXJlbnRFbGVtZW50Lm9mZnNldEhlaWdodCArICJweCI7CiAgICAgICAgfQogICAgICAgIHZhciByZXNldEFzcGVjdFJhdGlvID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgLy9jb3JyZWN0IGNvbnRhaW5lciBhc3BlY3QgcmF0aW8gd2l0aCB2aWRlbyBhc3BlY3QgcmF0aW8KICAgICAgICAgICAgY29udGFpbmVyLnN0eWxlLnBhZGRpbmdCb3R0b20gPSAxMDAvdmlkZW8ub2Zmc2V0V2lkdGgqdmlkZW8ub2Zmc2V0SGVpZ2h0ICsgIiUiOwogICAgICAgICAgICBsb2FkZXIuc3R5bGUuaGVpZ2h0ID0gdmlkZW8ub2Zmc2V0SGVpZ2h0ICsgInB4IjsKICAgICAgICB9CiAgICAgICAgdmFyIG1lbnVzID0ge307CiAgICAgICAgcmVtb3ZlTWVudSA9IGZ1bmN0aW9uKHRpdGxlKSB7CiAgICAgICAgICAgIGlmKHRpdGxlIGluIG1lbnVzKXsKICAgICAgICAgICAgICAgIG1lbnVzW3RpdGxlXS5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKG1lbnVzW3RpdGxlXSk7CiAgICAgICAgICAgICAgICBkZWxldGUgbWVudXNbdGl0bGVdOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGFkZE1lbnUgPSBmdW5jdGlvbih0aXRsZSwgb3B0aW9ucywgaGFuZGxlciwgc2VsZWN0ZWRJbmRleCl7CiAgICAgICAgICAgIHZhciBkaXYgPSBtZW51c1t0aXRsZV0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgICAgICAgICAgdmFyIGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgibGFiZWwiKTsKICAgICAgICAgICAgbGFiZWwuaW5uZXJUZXh0ID0gdGl0bGU7CiAgICAgICAgICAgIGRpdi5hcHBlbmRDaGlsZChsYWJlbCk7CiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNlbGVjdCIpOwogICAgICAgICAgICBsYWJlbC5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIGZ1bmN0aW9uKGUpewogICAgICAgICAgICAgICAgc2VsZWN0LmNsaWNrKCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgb3B0aW9ucy5sZW5ndGg7IGkrKyl7CiAgICAgICAgICAgICAgICB2YXIgbyA9IG9wdGlvbnNbaV07CiAgICAgICAgICAgICAgICB2YXIgb3B0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgib3B0aW9uIik7CiAgICAgICAgICAgICAgICBvcHQuaW5uZXJUZXh0ID0gby50aXRsZTsKICAgICAgICAgICAgICAgIG9wdC5pbmZvID0gby5pbmZvOwogICAgICAgICAgICAgICAgaWYoaSA9PSBzZWxlY3RlZEluZGV4KQogICAgICAgICAgICAgICAgICAgIG9wdC5zZWxlY3RlZCA9IHRydWU7CiAgICAgICAgICAgICAgICBzZWxlY3QuYXBwZW5kQ2hpbGQob3B0KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoc2VsZWN0KTsKICAgICAgICAgICAgc2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoImNoYW5nZSIsIGhhbmRsZXIpOwogICAgICAgICAgICBjb250cm9sc19lbGVtZW50cy5hcHBlbmRDaGlsZChkaXYpOwogICAgICAgICAgICAKICAgICAgICAgICAgcmVzZXRDb250cm9sc0hlaWdodCgpOwogICAgICAgIH07CiAgICAgICAgdmFyIGxvYWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJsb2FkZXIiKTsKICAgICAgICBmdW5jdGlvbiBoaWRlTG9hZGVyKCl7CiAgICAgICAgICAgIGlmKCFsb2FkZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCJoaWRlIikpCiAgICAgICAgICAgICAgICBsb2FkZXIuY2xhc3NMaXN0LmFkZCgiaGlkZSIpOwogICAgICAgIH0KICAgICAgICB2aWRlby5hZGRFdmVudExpc3RlbmVyKCJsb2FkZWRkYXRhIiwgcmVzZXRBc3BlY3RSYXRpbyk7CiAgICAgICAgdmlkZW8uYWRkRXZlbnRMaXN0ZW5lcigiZXJyb3IiLCBoaWRlTG9hZGVyKTsKICAgICAgICB2aWRlby5hZGRFdmVudExpc3RlbmVyKCJsb2Fkc3RhcnQiLCByZXNldEFzcGVjdFJhdGlvKTsKICAgICAgICB2aWRlby5hZGRFdmVudExpc3RlbmVyKCJwbGF5aW5nIiwgcmVzZXRBc3BlY3RSYXRpbyk7CiAgICAgICAgdmFyIGJvdGggPSBmdW5jdGlvbihlKXsKICAgICAgICAgICAgcmVzZXRBc3BlY3RSYXRpbygpOwogICAgICAgICAgICByZXNldENvbnRyb2xzSGVpZ2h0KCk7CiAgICAgICAgICAgIGhpZGVMb2FkZXIoKTsKICAgICAgICB9OwogICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJyZXNpemUiLCBib3RoKTsKICAgICAgICB2aWRlby5hZGRFdmVudExpc3RlbmVyKCJsb2FkZWRtZXRhZGF0YSIsIGJvdGgpOwogICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJsb2FkIiwgYm90aCk7CiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoImtleWRvd24iLCBmdW5jdGlvbihlKXsKICAgICAgICAgICAgY29udGFpbmVyLmRpc3BhdGNoRXZlbnQobmV3IGUuY29uc3RydWN0b3IoZS50eXBlLCBlKSk7CiAgICAgICAgfSk7CiAgICA8L3NjcmlwdD4KPC9kaXY+Cg"},{ name : "dashjs-argan", data : "eyJkcm1fc2VydmVyX3dpZGV2aW5lIjp7ImhlbHAiOiJjb20ud2lkZXZpbmUuYWxwaGEiLCJkZWZhdWx0XyI6IltkZWZhdWx0OiBDU3RyaW5nKGh0dHBzOi8vd2lkZXZpbmUtcHJveHkuYXBwc3BvdC5jb20vcHJveHkpXSJ9LCJzZXRTZWdtZW50T3ZlcmxhcFRvbGVyYW5jZVRpbWUiOnsiaGVscCI6IlNlZ21lbnQgb3ZlcmxhcCB0b2xvcmFuY2UgdGhyZXNob2xkIiwiZGVmYXVsdF8iOiJbZGVmYXVsdDogQ0ludCg0KV0ifSwiZHJtX3NlcnZlcl9wbGF5cmVhZHkiOnsiaGVscCI6ImNvbS53aWRldmluZS5hbHBoYSIsImRlZmF1bHRfIjoiW2RlZmF1bHQ6IENTdHJpbmcoaHR0cHM6Ly9wbGF5cmVhZHkuZGlyZWN0dGFwcy5uZXQvcHIvc3ZjL3JpZ2h0c21hbmFnZXIuYXNteD9QbGF5UmlnaHQ9MSZVc2VTaW1wbGVOb25QZXJzaXN0ZW50TGljZW5zZT0xJlBsYXlFbmFibGVycz03ODY2MjdEOC1DMkE2LTQ0QkUtOEY4OC0wOEFFMjU1QjAxQTcpXSJ9fQ"}];
var __map_reserved = {};
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
Argan.HELP_RESOURCE_KEY = "_help_map";
Main.playerSrcExtended = new haxe_ds_StringMap();
Main.id = 0;
haxe_Template.splitter = new EReg("(::[A-Za-z0-9_ ()&|!+=/><*.\"-]+::|\\$\\$([A-Za-z0-9_-]+)\\()","");
haxe_Template.expr_splitter = new EReg("(\\(|\\)|[ \r\n\t]*\"[^\"]*\"[ \r\n\t]*|[!+=/><*.&|-]+)","");
haxe_Template.expr_trim = new EReg("^[ ]*([^ ]+)[ ]*$","");
haxe_Template.expr_int = new EReg("^[0-9]+$","");
haxe_Template.expr_float = new EReg("^([+-]?)(?=\\d|,\\d)\\d*(,\\d*)?([Ee]([+-]?\\d+))?$","");
haxe_Template.globals = { };
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
